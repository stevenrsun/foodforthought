{"ast":null,"code":"var core = require(\"../level2/core\").dom.level2.core,\n    HtmlToDom = require('../browser/htmltodom').HtmlToDom,\n    domToHtml = require('../browser/domtohtml').domToHtml,\n    htmlencoding = require('../browser/htmlencoding'),\n    HTMLEncode = htmlencoding.HTMLEncode,\n    HTMLDecode = htmlencoding.HTMLDecode; // modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325\n\n\ncore = Object.create(core);\n/*\n  valuetype DOMString sequence<unsigned short>;\n  typedef   unsigned long long DOMTimeStamp;\n  typedef   any DOMUserData;\n  typedef   Object DOMObject;\n\n*/\n// ExceptionCode\n\ncore.VALIDATION_ERR = 16;\ncore.TYPE_MISMATCH_ERR = 17;\n/*\n  // Introduced in DOM Level 3:\n  interface NameList {\n    DOMString          getName(in unsigned long index);\n    DOMString          getNamespaceURI(in unsigned long index);\n    readonly attribute unsigned long   length;\n    boolean            contains(in DOMString str);\n    boolean            containsNS(in DOMString namespaceURI,\n                                  in DOMString name);\n  };\n\n  // Introduced in DOM Level 3:\n  interface DOMImplementationList {\n    DOMImplementation  item(in unsigned long index);\n    readonly attribute unsigned long   length;\n  };\n\n  // Introduced in DOM Level 3:\n  interface DOMImplementationSource {\n    DOMImplementation  getDOMImplementation(in DOMString features);\n    DOMImplementationList getDOMImplementationList(in DOMString features);\n  };\n*/\n\ncore.DOMImplementation.prototype.getFeature = function (feature, version) {};\n/*\n  interface Node {\n    // Modified in DOM Level 3:\n    Node               insertBefore(in Node newChild,\n                                    in Node refChild)\n                                        raises(DOMException);\n    // Modified in DOM Level 3:\n    Node               replaceChild(in Node newChild,\n                                    in Node oldChild)\n                                        raises(DOMException);\n    // Modified in DOM Level 3:\n    Node               removeChild(in Node oldChild)\n                                        raises(DOMException);\n    // Modified in DOM Level 3:\n    Node               appendChild(in Node newChild)\n                                        raises(DOMException);\n    boolean            hasChildNodes();\n    Node               cloneNode(in boolean deep);\n    // Modified in DOM Level 3:\n    void               normalize();\n    // Introduced in DOM Level 3:\n    readonly attribute DOMString       baseURI;\n*/\n// Compare Document Position\n\n\nvar DOCUMENT_POSITION_DISCONNECTED = core.Node.prototype.DOCUMENT_POSITION_DISCONNECTED = 0x01;\nvar DOCUMENT_POSITION_PRECEDING = core.Node.prototype.DOCUMENT_POSITION_PRECEDING = 0x02;\nvar DOCUMENT_POSITION_FOLLOWING = core.Node.prototype.DOCUMENT_POSITION_FOLLOWING = 0x04;\nvar DOCUMENT_POSITION_CONTAINS = core.Node.prototype.DOCUMENT_POSITION_CONTAINS = 0x08;\nvar DOCUMENT_POSITION_CONTAINED_BY = core.Node.prototype.DOCUMENT_POSITION_CONTAINED_BY = 0x10;\nvar DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = core.Node.prototype.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\nvar DOCUMENT_TYPE_NODE = core.Node.prototype.DOCUMENT_TYPE_NODE;\n\ncore.Node.prototype.compareDocumentPosition = function compareDocumentPosition(otherNode) {\n  if (!(otherNode instanceof core.Node)) {\n    throw Error(\"Comparing position against non-Node values is not allowed\");\n  }\n\n  var thisOwner, otherOwner;\n  if (this.nodeType === this.DOCUMENT_NODE) thisOwner = this;else thisOwner = this.ownerDocument;\n  if (otherNode.nodeType === this.DOCUMENT_NODE) otherOwner = otherNode;else otherOwner = otherNode.ownerDocument;\n  if (this === otherNode) return 0;\n  if (this === otherNode.ownerDocument) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY;\n  if (this.ownerDocument === otherNode) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS;\n  if (thisOwner !== otherOwner) return DOCUMENT_POSITION_DISCONNECTED; // Text nodes for attributes does not have a _parentNode. So we need to find them as attribute child.\n\n  if (this.nodeType === this.ATTRIBUTE_NODE && this._childNodes && this._childNodes.indexOf(otherNode) !== -1) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY;\n  if (otherNode.nodeType === this.ATTRIBUTE_NODE && otherNode._childNodes && otherNode._childNodes.indexOf(this) !== -1) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS;\n  var point = this;\n  var parents = [];\n  var previous = null;\n\n  while (point) {\n    if (point == otherNode) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS;\n    parents.push(point);\n    point = point._parentNode;\n  }\n\n  point = otherNode;\n  previous = null;\n\n  while (point) {\n    if (point == this) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY;\n    var location_index = parents.indexOf(point);\n\n    if (location_index !== -1) {\n      var smallest_common_ancestor = parents[location_index];\n\n      var this_index = smallest_common_ancestor._childNodes.indexOf(parents[location_index - 1]);\n\n      var other_index = smallest_common_ancestor._childNodes.indexOf(previous);\n\n      if (this_index > other_index) {\n        return DOCUMENT_POSITION_PRECEDING;\n      } else {\n        return DOCUMENT_POSITION_FOLLOWING;\n      }\n    }\n\n    previous = point;\n    point = point._parentNode;\n  }\n\n  return DOCUMENT_POSITION_DISCONNECTED;\n};\n/*\n    // Introduced in DOM Level 3:\n             attribute DOMString       textContent;\n                                        // raises(DOMException) on setting\n                                        // raises(DOMException) on retrieval\n*/\n\n\ncore.Node.prototype.isSameNode = function (other) {\n  return other === this;\n};\n\ncore.Node.prototype.__defineGetter__('textContent', function () {\n  if (this.nodeType === this.TEXT_NODE || this.nodeType === this.COMMENT_NODE || this.nodeType === this.ATTRIBUTE_NODE || this.nodeType === this.CDATA_SECTION_NODE) {\n    return this.nodeValue;\n  } else if (this.nodeType === this.ELEMENT_NODE || this.nodeType === this.DOCUMENT_FRAGMENT_NODE) {\n    var out = '';\n\n    for (var i = 0; i < this.childNodes.length; i += 1) {\n      out += this.childNodes[i].textContent || '';\n    }\n\n    return out;\n  } else {\n    return null;\n  }\n});\n\ncore.Node.prototype.__defineSetter__('textContent', function (txt) {\n  for (var i = this.childNodes.length; --i >= 0;) {\n    this.removeChild(this.childNodes.item(i));\n  }\n\n  if (txt !== \"\" && txt != null) {\n    this.appendChild(this._ownerDocument.createTextNode(txt));\n  }\n\n  return txt;\n});\n/*\n    // Introduced in DOM Level 3:\n    DOMString          lookupPrefix(in DOMString namespaceURI);\n    // Introduced in DOM Level 3:\n    boolean            isDefaultNamespace(in DOMString namespaceURI);\n    // Introduced in DOM Level 3:\n    DOMString          lookupNamespaceURI(in DOMString prefix);\n*/\n// Introduced in DOM Level 3:\n\n\ncore.Node.prototype.isEqualNode = function (other) {\n  var self = this;\n\n  var diffValues = function () {\n    for (var i = 0; i < arguments.length; i++) {\n      var k = arguments[i];\n      if (self[k] != other[k]) return true;\n    }\n\n    return false;\n  };\n\n  var diffNamedNodeMaps = function (snnm, onnm) {\n    if (snnm == null && onnm == null) return false;\n    if (snnm == null || onnm == null) return true;\n    if (snnm.length != onnm.length) return true;\n    var js = [];\n\n    for (var j = 0; j < onnm.length; j++) {\n      js[j] = j;\n    }\n\n    for (var i = 0; i < snnm.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < js.length; j++) {\n        if (snnm.item(i).isEqualNode(onnm.item(js[j]))) {\n          found = true; // in order to be 100% accurate, we remove index values from consideration once they've matched\n\n          js.splice(j, 1);\n          break;\n        }\n      }\n\n      if (!found) return true;\n    }\n\n    return false;\n  };\n\n  var diffNodeLists = function (snl, onl) {\n    if (snl == null && onl == null) return false;\n    if (snl == null || onl == null) return true;\n    if (snl.length != onl.length) return true;\n\n    for (var i = 0; i < snl.length; i++) {\n      if (!snl.item(i).isEqualNode(onl.item(i))) return true;\n    }\n\n    return false;\n  };\n\n  if (!other) return false;\n  if (this.isSameNode(other)) return true;\n  if (this.nodeType != other.nodeType) return false;\n  if (diffValues('nodeName', 'localName', 'namespaceURI', 'prefix', 'nodeValue')) return false;\n  if (diffNamedNodeMaps(this.attributes, other.attributes)) return false;\n  if (diffNodeLists(this.childNodes, other.childNodes)) return false;\n\n  if (this.nodeType == DOCUMENT_TYPE_NODE) {\n    if (diffValues('publicId', 'systemId', 'internalSubset')) return false;\n    if (diffNamedNodeMaps(this.entities, other.entities)) return false;\n    if (diffNamedNodeMaps(this.notations, other.notations)) return false;\n  }\n\n  return true;\n};\n/*\n    // Introduced in DOM Level 3:\n    DOMObject          getFeature(in DOMString feature,\n                                  in DOMString version);\n*/\n// Introduced in DOM Level 3:\n\n\ncore.Node.prototype.setUserData = function (key, data, handler) {\n  var r = this[key] || null;\n  this[key] = data;\n  return r;\n}; // Introduced in DOM Level 3:\n\n\ncore.Node.prototype.getUserData = function (key) {\n  var r = this[key] || null;\n  return r;\n};\n/*\n  interface NodeList {\n    Node               item(in unsigned long index);\n    readonly attribute unsigned long   length;\n  };\n\n  interface NamedNodeMap {\n    Node               getNamedItem(in DOMString name);\n    Node               setNamedItem(in Node arg)\n                                        raises(DOMException);\n    Node               removeNamedItem(in DOMString name)\n                                        raises(DOMException);\n    Node               item(in unsigned long index);\n    readonly attribute unsigned long   length;\n    // Introduced in DOM Level 2:\n    Node               getNamedItemNS(in DOMString namespaceURI,\n                                      in DOMString localName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    Node               setNamedItemNS(in Node arg)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    Node               removeNamedItemNS(in DOMString namespaceURI,\n                                         in DOMString localName)\n                                        raises(DOMException);\n  };\n\n  interface CharacterData : Node {\n             attribute DOMString       data;\n                                        // raises(DOMException) on setting\n                                        // raises(DOMException) on retrieval\n\n    readonly attribute unsigned long   length;\n    DOMString          substringData(in unsigned long offset,\n                                     in unsigned long count)\n                                        raises(DOMException);\n    void               appendData(in DOMString arg)\n                                        raises(DOMException);\n    void               insertData(in unsigned long offset,\n                                  in DOMString arg)\n                                        raises(DOMException);\n    void               deleteData(in unsigned long offset,\n                                  in unsigned long count)\n                                        raises(DOMException);\n    void               replaceData(in unsigned long offset,\n                                   in unsigned long count,\n                                   in DOMString arg)\n                                        raises(DOMException);\n  };\n\n  interface Attr : Node {\n    readonly attribute DOMString       name;\n    readonly attribute boolean         specified;\n             attribute DOMString       value;\n                                        // raises(DOMException) on setting\n\n    // Introduced in DOM Level 2:\n    readonly attribute Element         ownerElement;\n    // Introduced in DOM Level 3:\n    readonly attribute TypeInfo        schemaTypeInfo;\n\n*/\n// Introduced in DOM Level 3:\n\n\ncore.Attr.prototype.__defineGetter__('isId', function () {\n  return this.name.toLowerCase() === 'id';\n});\n/*\n  };\n\n  interface Element : Node {\n    readonly attribute DOMString       tagName;\n    DOMString          getAttribute(in DOMString name);\n    void               setAttribute(in DOMString name,\n                                    in DOMString value)\n                                        raises(DOMException);\n    void               removeAttribute(in DOMString name)\n                                        raises(DOMException);\n    Attr               getAttributeNode(in DOMString name);\n    Attr               setAttributeNode(in Attr newAttr)\n                                        raises(DOMException);\n    Attr               removeAttributeNode(in Attr oldAttr)\n                                        raises(DOMException);\n    NodeList           getElementsByTagName(in DOMString name);\n    // Introduced in DOM Level 2:\n    DOMString          getAttributeNS(in DOMString namespaceURI,\n                                      in DOMString localName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    void               setAttributeNS(in DOMString namespaceURI,\n                                      in DOMString qualifiedName,\n                                      in DOMString value)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    void               removeAttributeNS(in DOMString namespaceURI,\n                                         in DOMString localName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    Attr               getAttributeNodeNS(in DOMString namespaceURI,\n                                          in DOMString localName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    Attr               setAttributeNodeNS(in Attr newAttr)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,\n                                              in DOMString localName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    boolean            hasAttribute(in DOMString name);\n    // Introduced in DOM Level 2:\n    boolean            hasAttributeNS(in DOMString namespaceURI,\n                                      in DOMString localName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 3:\n    readonly attribute TypeInfo        schemaTypeInfo;\n    // Introduced in DOM Level 3:\n    void               setIdAttribute(in DOMString name,\n                                      in boolean isId)\n                                        raises(DOMException);\n    // Introduced in DOM Level 3:\n    void               setIdAttributeNS(in DOMString namespaceURI,\n                                        in DOMString localName,\n                                        in boolean isId)\n                                        raises(DOMException);\n    // Introduced in DOM Level 3:\n    void               setIdAttributeNode(in Attr idAttr,\n                                          in boolean isId)\n                                        raises(DOMException);\n  };\n\n  interface Text : CharacterData {\n    Text               splitText(in unsigned long offset)\n                                        raises(DOMException);\n    // Introduced in DOM Level 3:\n    readonly attribute boolean         isElementContentWhitespace;\n    // Introduced in DOM Level 3:\n    readonly attribute DOMString       wholeText;\n    // Introduced in DOM Level 3:\n    Text               replaceWholeText(in DOMString content)\n                                        raises(DOMException);\n  };\n\n  interface Comment : CharacterData {\n  };\n\n  // Introduced in DOM Level 3:\n  interface TypeInfo {\n    readonly attribute DOMString       typeName;\n    readonly attribute DOMString       typeNamespace;\n\n    // DerivationMethods\n    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;\n    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;\n    const unsigned long       DERIVATION_UNION               = 0x00000004;\n    const unsigned long       DERIVATION_LIST                = 0x00000008;\n\n    boolean            isDerivedFrom(in DOMString typeNamespaceArg,\n                                     in DOMString typeNameArg,\n                                     in unsigned long derivationMethod);\n  };\n*/\n// Introduced in DOM Level 3:\n\n\ncore.UserDataHandler = function () {};\n\ncore.UserDataHandler.prototype.NODE_CLONED = 1;\ncore.UserDataHandler.prototype.NODE_IMPORTED = 2;\ncore.UserDataHandler.prototype.NODE_DELETED = 3;\ncore.UserDataHandler.prototype.NODE_RENAMED = 4;\ncore.UserDataHandler.prototype.NODE_ADOPTED = 5;\n\ncore.UserDataHandler.prototype.handle = function (operation, key, data, src, dst) {}; // Introduced in DOM Level 3:\n\n\ncore.DOMError = function (severity, message, type, relatedException, relatedData, location) {\n  this._severity = severity;\n  this._message = message;\n  this._type = type;\n  this._relatedException = relatedException;\n  this._relatedData = relatedData;\n  this._location = location;\n};\n\ncore.DOMError.prototype = {};\ncore.DOMError.prototype.SEVERITY_WARNING = 1;\ncore.DOMError.prototype.SEVERITY_ERROR = 2;\ncore.DOMError.prototype.SEVERITY_FATAL_ERROR = 3;\n\ncore.DOMError.prototype.__defineGetter__('severity', function () {\n  return this._severity;\n});\n\ncore.DOMError.prototype.__defineGetter__('message', function () {\n  return this._message;\n});\n\ncore.DOMError.prototype.__defineGetter__('type', function () {\n  return this._type;\n});\n\ncore.DOMError.prototype.__defineGetter__('relatedException', function () {\n  return this._relatedException;\n});\n\ncore.DOMError.prototype.__defineGetter__('relatedData', function () {\n  return this._relatedData;\n});\n\ncore.DOMError.prototype.__defineGetter__('location', function () {\n  return this._location;\n});\n/*\n  // Introduced in DOM Level 3:\n  interface DOMErrorHandler {\n    boolean            handleError(in DOMError error);\n  };\n\n  // Introduced in DOM Level 3:\n  interface DOMLocator {\n    readonly attribute long            lineNumber;\n    readonly attribute long            columnNumber;\n    readonly attribute long            byteOffset;\n    readonly attribute long            utf16Offset;\n    readonly attribute Node            relatedNode;\n    readonly attribute DOMString       uri;\n  };\n*/\n// Introduced in DOM Level 3:\n\n\ncore.DOMConfiguration = function () {\n  var possibleParameterNames = {\n    'canonical-form': [false, true],\n    // extra rules for true\n    'cdata-sections': [true, false],\n    'check-character-normalization': [false, true],\n    'comments': [true, false],\n    'datatype-normalization': [false, true],\n    'element-content-whitespace': [true, false],\n    'entities': [true, false],\n    // 'error-handler': [],\n    'infoset': [undefined, true, false],\n    // extra rules for true\n    'namespaces': [true, false],\n    'namespace-declarations': [true, false],\n    // only checked if namespaces is true\n    'normalize-characters': [false, true],\n    // 'schema-location': [],\n    // 'schema-type': [],\n    'split-cdata-sections': [true, false],\n    'validate': [false, true],\n    'validate-if-schema': [false, true],\n    'well-formed': [true, false]\n  };\n};\n\ncore.DOMConfiguration.prototype = {\n  setParameter: function (name, value) {},\n  getParameter: function (name) {},\n  canSetParameter: function (name, value) {},\n  parameterNames: function () {}\n}; //core.Document.prototype._domConfig = new core.DOMConfiguration();\n\ncore.Document.prototype.__defineGetter__('domConfig', function () {\n  return this._domConfig || new core.DOMConfiguration();\n  ;\n}); // Introduced in DOM Level 3:\n\n\ncore.DOMStringList = function () {};\n\ncore.DOMStringList.prototype = {\n  item: function () {},\n  length: function () {},\n  contains: function () {}\n};\n/*\n  interface CDATASection : Text {\n  };\n\n  interface DocumentType : Node {\n    readonly attribute DOMString       name;\n    readonly attribute NamedNodeMap    entities;\n    readonly attribute NamedNodeMap    notations;\n    // Introduced in DOM Level 2:\n    readonly attribute DOMString       publicId;\n    // Introduced in DOM Level 2:\n    readonly attribute DOMString       systemId;\n    // Introduced in DOM Level 2:\n    readonly attribute DOMString       internalSubset;\n  };\n\n  interface Notation : Node {\n    readonly attribute DOMString       publicId;\n    readonly attribute DOMString       systemId;\n  };\n\n  interface Entity : Node {\n    readonly attribute DOMString       publicId;\n    readonly attribute DOMString       systemId;\n    readonly attribute DOMString       notationName;\n    // Introduced in DOM Level 3:\n    readonly attribute DOMString       inputEncoding;\n    // Introduced in DOM Level 3:\n    readonly attribute DOMString       xmlEncoding;\n    // Introduced in DOM Level 3:\n    readonly attribute DOMString       xmlVersion;\n  };\n\n  interface EntityReference : Node {\n  };\n\n  interface ProcessingInstruction : Node {\n    readonly attribute DOMString       target;\n             attribute DOMString       data;\n                                        // raises(DOMException) on setting\n\n  };\n\n  interface DocumentFragment : Node {\n  };\n\n  interface Document : Node {\n    // Modified in DOM Level 3:\n    readonly attribute DocumentType    doctype;\n    readonly attribute DOMImplementation implementation;\n    readonly attribute Element         documentElement;\n    Element            createElement(in DOMString tagName)\n                                        raises(DOMException);\n    DocumentFragment   createDocumentFragment();\n    Text               createTextNode(in DOMString data);\n    Comment            createComment(in DOMString data);\n    CDATASection       createCDATASection(in DOMString data)\n                                        raises(DOMException);\n    ProcessingInstruction createProcessingInstruction(in DOMString target,\n                                                      in DOMString data)\n                                        raises(DOMException);\n    Attr               createAttribute(in DOMString name)\n                                        raises(DOMException);\n    EntityReference    createEntityReference(in DOMString name)\n                                        raises(DOMException);\n    NodeList           getElementsByTagName(in DOMString tagname);\n    // Introduced in DOM Level 2:\n    Node               importNode(in Node importedNode,\n                                  in boolean deep)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    Element            createElementNS(in DOMString namespaceURI,\n                                       in DOMString qualifiedName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    Attr               createAttributeNS(in DOMString namespaceURI,\n                                         in DOMString qualifiedName)\n                                        raises(DOMException);\n    // Introduced in DOM Level 2:\n    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,\n                                              in DOMString localName);\n    // Introduced in DOM Level 2:\n    Element            getElementById(in DOMString elementId);\n*/\n// Introduced in DOM Level 3:\n\ncore.Document.prototype._inputEncoding = null;\n\ncore.Document.prototype.__defineGetter__('inputEncoding', function () {\n  return this._inputEncoding;\n});\n/*\n    // Introduced in DOM Level 3:\n    readonly attribute DOMString       xmlEncoding;\n    // Introduced in DOM Level 3:\n             attribute boolean         xmlStandalone;\n                                        // raises(DOMException) on setting\n\n    // Introduced in DOM Level 3:\n             attribute DOMString       xmlVersion;\n                                        // raises(DOMException) on setting\n\n    // Introduced in DOM Level 3:\n             attribute boolean         strictErrorChecking;\n    // Introduced in DOM Level 3:\n             attribute DOMString       documentURI;\n    // Introduced in DOM Level 3:\n    Node               adoptNode(in Node source)\n                                        raises(DOMException);\n    // Introduced in DOM Level 3:\n    readonly attribute DOMConfiguration domConfig;\n    // Introduced in DOM Level 3:\n    void               normalizeDocument();\n    // Introduced in DOM Level 3:\n    Node               renameNode(in Node n,\n                                  in DOMString namespaceURI,\n                                  in DOMString qualifiedName)\n                                        raises(DOMException);\n  };\n};\n\n#endif // _DOM_IDL_\n*/\n\n\nexports.dom = {\n  level3: {\n    core: core\n  }\n};","map":null,"metadata":{},"sourceType":"script"}