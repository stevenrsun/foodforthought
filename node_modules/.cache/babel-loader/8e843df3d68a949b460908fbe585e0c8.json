{"ast":null,"code":"var dom = exports.dom = require(\"./jsdom/level3/index\").dom,\n    features = require('./jsdom/browser/documentfeatures'),\n    fs = require(\"fs\"),\n    pkg = JSON.parse(fs.readFileSync(__dirname + \"/../package.json\")),\n    request = require('request'),\n    URL = require('url');\n\nvar style = require('./jsdom/level2/style');\n\nexports.defaultLevel = dom.level3.html;\nexports.browserAugmentation = require(\"./jsdom/browser/index\").browserAugmentation;\nexports.windowAugmentation = require(\"./jsdom/browser/index\").windowAugmentation; // Proxy feature functions to features module.\n\n['availableDocumentFeatures', 'defaultDocumentFeatures', 'applyDocumentFeatures'].forEach(function (propName) {\n  exports.__defineGetter__(propName, function () {\n    return features[propName];\n  });\n\n  exports.__defineSetter__(propName, function (val) {\n    return features[propName] = val;\n  });\n});\nexports.debugMode = false;\n\nvar createWindow = exports.createWindow = require(\"./jsdom/browser/index\").createWindow;\n\nexports.__defineGetter__('version', function () {\n  return pkg.version;\n});\n\nexports.level = function (level, feature) {\n  if (!feature) feature = 'core';\n  return require('./jsdom/level' + level + '/' + feature).dom['level' + level][feature];\n};\n\nexports.jsdom = function (html, level, options) {\n  options = options || {};\n\n  if (typeof level == \"string\") {\n    level = exports.level(level, 'html');\n  } else {\n    level = level || exports.defaultLevel;\n  }\n\n  if (!options.url) {\n    options.url = module.parent.id === 'jsdom' ? module.parent.parent.filename : module.parent.filename;\n  }\n\n  var browser = exports.browserAugmentation(level, options),\n      doc = browser.HTMLDocument ? new browser.HTMLDocument(options) : new browser.Document(options);\n\n  if (options.features && options.features.QuerySelector) {\n    require(\"./jsdom/selectors/index\").applyQuerySelector(doc, level);\n  }\n\n  features.applyDocumentFeatures(doc, options.features);\n\n  if (typeof html === 'undefined' || html === null) {\n    doc.write('<html><head></head><body></body></html>');\n  } else {\n    doc.write(html + '');\n  }\n\n  if (doc.close && !options.deferClose) {\n    doc.close();\n  } // Kept for backwards-compatibility. The window is lazily created when\n  // document.parentWindow or document.defaultView is accessed.\n\n\n  doc.createWindow = function () {\n    // Remove ourself\n    if (doc.createWindow) {\n      delete doc.createWindow;\n    }\n\n    return doc.parentWindow;\n  };\n\n  return doc;\n};\n\nexports.html = function (html, level, options) {\n  html += ''; // TODO: cache a regex and use it here instead\n  //       or make the parser handle it\n\n  var htmlLowered = html.toLowerCase(); // body\n\n  if (!~htmlLowered.indexOf('<body')) {\n    html = '<body>' + html + '</body>';\n  } // html\n\n\n  if (!~htmlLowered.indexOf('<html')) {\n    html = '<html>' + html + '</html>';\n  }\n\n  return exports.jsdom(html, level, options);\n};\n\nexports.jQueryify = exports.jsdom.jQueryify = function (window\n/* path [optional], callback */\n) {\n  if (!window || !window.document) {\n    return;\n  }\n\n  var args = Array.prototype.slice.call(arguments),\n      callback = typeof args[args.length - 1] === 'function' && args.pop(),\n      path,\n      jQueryTag = window.document.createElement(\"script\");\n  jQueryTag.className = \"jsdom\";\n\n  if (args.length > 1 && typeof (args[1] === 'string')) {\n    path = args[1];\n  }\n\n  var features = window.document.implementation._features;\n  window.document.implementation.addFeature('FetchExternalResources', ['script']);\n  window.document.implementation.addFeature('ProcessExternalResources', ['script']);\n  window.document.implementation.addFeature('MutationEvents', [\"1.0\"]);\n  jQueryTag.src = path || 'http://code.jquery.com/jquery-latest.js';\n  window.document.body.appendChild(jQueryTag);\n\n  jQueryTag.onload = function () {\n    if (callback) {\n      callback(window, window.jQuery);\n    }\n\n    window.document.implementation._features = features;\n  };\n\n  return window;\n};\n\nexports.env = exports.jsdom.env = function () {\n  var args = Array.prototype.slice.call(arguments),\n      config = exports.env.processArguments(args),\n      callback = config.done,\n      processHTML = function (err, html) {\n    html += '';\n\n    if (err) {\n      return callback(err);\n    }\n\n    config.scripts = config.scripts || [];\n\n    if (typeof config.scripts === 'string') {\n      config.scripts = [config.scripts];\n    }\n\n    config.src = config.src || [];\n\n    if (typeof config.src === 'string') {\n      config.src = [config.src];\n    }\n\n    var options = {\n      features: config.features || {\n        'FetchExternalResources': false,\n        'ProcessExternalResources': false\n      },\n      url: config.url\n    },\n        window = exports.html(html, null, options).createWindow(),\n        features = JSON.parse(JSON.stringify(window.document.implementation._features)),\n        docsLoaded = 0,\n        totalDocs = config.scripts.length + config.src.length,\n        readyState = null,\n        errors = null;\n\n    if (!window || !window.document) {\n      return callback(new Error('JSDOM: a window object could not be created.'));\n    }\n\n    if (config.document) {\n      window.document._referrer = config.document.referrer;\n      window.document._cookie = config.document.cookie;\n    }\n\n    window.document.implementation.addFeature('FetchExternalResources', ['script']);\n    window.document.implementation.addFeature('ProcessExternalResources', ['script']);\n    window.document.implementation.addFeature('MutationEvents', ['1.0']);\n\n    var scriptComplete = function () {\n      docsLoaded++;\n\n      if (docsLoaded >= totalDocs) {\n        window.document.implementation._features = features;\n\n        if (errors) {\n          errors = errors.concat(window.document.errors || []);\n        }\n\n        process.nextTick(function () {\n          callback(errors, window);\n        });\n      }\n    };\n\n    if (config.scripts.length > 0 || config.src.length > 0) {\n      config.scripts.forEach(function (src) {\n        var script = window.document.createElement('script');\n        script.className = \"jsdom\";\n\n        script.onload = function () {\n          scriptComplete();\n        };\n\n        script.onerror = function (e) {\n          if (!errors) {\n            errors = [];\n          }\n\n          errors.push(e.error);\n          scriptComplete();\n        };\n\n        script.src = src;\n\n        try {\n          // project against invalid dom\n          // ex: http://www.google.com/foo#bar\n          window.document.documentElement.appendChild(script);\n        } catch (e) {\n          if (!errors) {\n            errors = [];\n          }\n\n          errors.push(e.error || e.message);\n          scriptComplete();\n        }\n      });\n      config.src.forEach(function (src) {\n        var script = window.document.createElement('script');\n\n        script.onload = function () {\n          process.nextTick(scriptComplete);\n        };\n\n        script.onerror = function (e) {\n          if (!errors) {\n            errors = [];\n          }\n\n          errors.push(e.error || e.message); // nextTick so that an exception within scriptComplete won't cause\n          // another script onerror (which would be an infinite loop)\n\n          process.nextTick(scriptComplete);\n        };\n\n        script.text = src;\n        window.document.documentElement.appendChild(script);\n        window.document.documentElement.removeChild(script);\n      });\n    } else {\n      scriptComplete();\n    }\n  };\n\n  config.html += ''; // Handle markup\n\n  if (config.html.indexOf(\"\\n\") > 0 || config.html.match(/^\\W*</)) {\n    processHTML(null, config.html); // Handle url/file\n  } else {\n    var url = URL.parse(config.html);\n    config.url = config.url || url.href;\n\n    if (url.hostname) {\n      request({\n        uri: url,\n        encoding: config.encoding || 'utf8',\n        headers: config.headers || {}\n      }, function (err, request, body) {\n        processHTML(err, body);\n      });\n    } else {\n      fs.readFile(config.html, processHTML);\n    }\n  }\n};\n/*\n  Since jsdom.env() is a helper for quickly and easily setting up a\n  window with scripts and such already loaded into it, the arguments\n  should be fairly flexible.  Here are the requirements\n\n  1) collect `html` (url, string, or file on disk)  (STRING)\n  2) load `code` into the window (array of scripts) (ARRAY)\n  3) callback when resources are `done`             (FUNCTION)\n  4) configuration                                  (OBJECT)\n\n  Rules:\n  + if there is one argument it had better be an object with atleast\n    a `html` and `done` property (other properties are gravy)\n\n  + arguments above are pulled out of the arguments and put into the\n    config object that is returned\n*/\n\n\nexports.env.processArguments = function (args) {\n  if (!args || !args.length || args.length < 1) {\n    throw new Error('No arguments passed to jsdom.env().');\n  }\n\n  var props = {\n    'html': true,\n    'done': true,\n    'scripts': false,\n    'config': false,\n    'url': false,\n    // the URL for location.href if different from html\n    'document': false // HTMLDocument properties\n\n  },\n      propKeys = Object.keys(props),\n      config = {\n    code: []\n  },\n      l = args.length;\n\n  if (l === 1) {\n    config = args[0];\n  } else {\n    args.forEach(function (v) {\n      var type = typeof v;\n\n      if (!v) {\n        return;\n      }\n\n      if (type === 'string' || v + '' === v) {\n        config.html = v;\n      } else if (type === 'object') {\n        // Array\n        if (v.length && v[0]) {\n          config.scripts = v;\n        } else {\n          // apply missing required properties if appropriate\n          propKeys.forEach(function (req) {\n            if (typeof v[req] !== 'undefined' && typeof config[req] === 'undefined') {\n              config[req] = v[req];\n              delete v[req];\n            }\n          });\n          config.config = v;\n        }\n      } else if (type === 'function') {\n        config.done = v;\n      }\n    });\n  }\n\n  propKeys.forEach(function (req) {\n    var required = props[req];\n\n    if (required && typeof config[req] === 'undefined') {\n      throw new Error(\"jsdom.env requires a '\" + req + \"' argument\");\n    }\n  });\n  return config;\n};","map":null,"metadata":{},"sourceType":"script"}