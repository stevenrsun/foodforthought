{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nimport applyNativeMethods from '../../modules/applyNativeMethods';\nimport ColorPropType from '../ColorPropType';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\nimport ViewPropTypes from '../ViewPropTypes';\nimport React, { Component } from 'react';\nimport { bool, number } from 'prop-types';\n\nvar ProgressBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ProgressBar, _Component);\n\n  function ProgressBar() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this._setProgressRef = function (element) {\n      _this._progressElement = element;\n    };\n\n    _this._updateProgressWidth = function () {\n      var _this$props = _this.props,\n          indeterminate = _this$props.indeterminate,\n          progress = _this$props.progress;\n      var percentageProgress = indeterminate ? 50 : progress * 100;\n      var width = indeterminate ? '25%' : percentageProgress + \"%\";\n\n      if (_this._progressElement) {\n        _this._progressElement.setNativeProps({\n          style: {\n            width: width\n          }\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = ProgressBar.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._updateProgressWidth();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this._updateProgressWidth();\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        color = _this$props2.color,\n        indeterminate = _this$props2.indeterminate,\n        progress = _this$props2.progress,\n        trackColor = _this$props2.trackColor,\n        style = _this$props2.style,\n        other = _objectWithoutPropertiesLoose(_this$props2, [\"color\", \"indeterminate\", \"progress\", \"trackColor\", \"style\"]);\n\n    var percentageProgress = progress * 100;\n    return React.createElement(View, _extends({}, other, {\n      accessibilityRole: \"progressbar\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuenow\": indeterminate ? null : percentageProgress,\n      style: [styles.track, style, {\n        backgroundColor: trackColor\n      }]\n    }), React.createElement(View, {\n      ref: this._setProgressRef,\n      style: [styles.progress, indeterminate && styles.animation, {\n        backgroundColor: color\n      }]\n    }));\n  };\n\n  return ProgressBar;\n}(Component);\n\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = {\n  color: '#1976D2',\n  indeterminate: false,\n  progress: 0,\n  trackColor: 'transparent'\n};\nProgressBar.propTypes = process.env.NODE_ENV !== \"production\" ? _objectSpread({}, ViewPropTypes, {\n  color: ColorPropType,\n  indeterminate: bool,\n  progress: number,\n  trackColor: ColorPropType\n}) : {};\nvar styles = StyleSheet.create({\n  track: {\n    height: 5,\n    overflow: 'hidden',\n    userSelect: 'none',\n    zIndex: 0\n  },\n  progress: {\n    height: '100%',\n    zIndex: -1\n  },\n  animation: {\n    animationDuration: '1s',\n    animationKeyframes: [{\n      '0%': {\n        transform: [{\n          translateX: '-100%'\n        }]\n      },\n      '100%': {\n        transform: [{\n          translateX: '400%'\n        }]\n      }\n    }],\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite'\n  }\n});\nexport default applyNativeMethods(ProgressBar);","map":null,"metadata":{},"sourceType":"module"}