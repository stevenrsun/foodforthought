{"ast":null,"code":"/**\n * Intercepts a method by replacing the prototype's implementation\n * with a wrapper that invokes the given interceptor instead.\n * \n *     utils.intercept(core.Element, 'inserBefore',\n *       function(_super, args, newChild, refChild) {\n *         console.log('insertBefore', newChild, refChild);\n *         return _super.apply(this, args);\n *       }\n *     );\n */\nexports.intercept = function (clazz, method, interceptor) {\n  var proto = clazz.prototype,\n      _super = proto[method],\n      unwrapArgs = interceptor.length > 2;\n\n  proto[method] = function () {\n    if (unwrapArgs) {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(_super, arguments);\n      return interceptor.apply(this, args);\n    } else {\n      return interceptor.call(this, _super, arguments);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}