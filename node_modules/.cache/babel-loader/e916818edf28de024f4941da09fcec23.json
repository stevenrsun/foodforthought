{"ast":null,"code":"// w3c Load/Save functionality: http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/\nvar core = require('./core').dom.level3.core;\n\nvar events = require('./events').dom.level3.events;\n\n;\nvar ls = {}; // TODO: what is this?\n//typedef dom::DOMConfiguration DOMConfiguration;\n\nls.LSException = function LSException(code) {\n  this.code = code;\n};\n\nls.LSException.prototype = {\n  // LSExceptionCode\n  PARSE_ERR: 81,\n  SERIALIZE_ERR: 82\n};\n\nls.DOMImplementationLS = function DOMImplementationLS() {};\n\nvar DOMImplementationExtension = {\n  // DOMImplementationLSMode\n  MODE_SYNCHRONOUS: 1,\n  MODE_ASYNCHRONOUS: 2,\n  // raises(dom::DOMException);\n  createLSParser: function (\n  /* int */\n  mode,\n  /* string */\n  schemaType) {\n    return new ls.LSParser(mode, schemaType);\n  },\n  createLSSerializer: function () {\n    return new ls.LSSerializer();\n  },\n  createLSInput: function () {\n    return new ls.LSInput();\n  },\n  createLSOutput: function () {\n    return new ls.LSOutput();\n  }\n};\nObject.keys(DOMImplementationExtension).forEach(function (k, v) {\n  core.DOMImplementation.prototype[k] = DOMImplementationExtension[k];\n});\nls.DOMImplementationLS.prototype = DOMImplementationExtension;\n\ncore.Document.getFeature = function () {\n  return DOMImplementationExtension;\n};\n\nls.LSParser = function LSParser() {\n  this._domConfig = new core.DOMConfiguration();\n};\n\nls.LSParser.prototype = {\n  get domConfig() {\n    return this._domConfig;\n  },\n\n  get filter() {\n    return this._filter || null;\n  },\n\n  set filter(value) {\n    this._filter = value;\n  },\n\n  get async() {\n    return this._async;\n  },\n\n  get busy() {\n    return this._busy;\n  },\n\n  // raises(dom::DOMException, LSException);\n  parse: function (\n  /* LSInput */\n  input) {\n    var doc = new core.Document();\n    doc._inputEncoding = 'UTF-16';\n    return doc;\n  },\n  // raises(dom::DOMException, LSException);\n  parseURI: function (\n  /* string */\n  uri) {\n    return new core.Document();\n  },\n  // ACTION_TYPES\n  ACTION_APPEND_AS_CHILDREN: 1,\n  ACTION_REPLACE_CHILDREN: 2,\n  ACTION_INSERT_BEFORE: 3,\n  ACTION_INSERT_AFTER: 4,\n  ACTION_REPLACE: 5,\n  // @returns Node\n  // @raises DOMException, LSException\n  parseWithContext: function (\n  /* LSInput */\n  input,\n  /* Node */\n  contextArg,\n  /* int */\n  action) {\n    return new core.Node();\n  },\n  abort: function () {// TODO: implement\n  }\n};\n\nls.LSInput = function LSInput() {};\n\nls.LSInput.prototype = {\n  get characterStream() {\n    return this._characterStream || null;\n  },\n\n  set characterStream(value) {\n    this._characterStream = value;\n  },\n\n  get byteStream() {\n    return this._byteStream || null;\n  },\n\n  set byteStream(value) {\n    this._byteStream = value;\n  },\n\n  get stringData() {\n    return this._stringData || null;\n  },\n\n  set stringData(value) {\n    this._stringData = value;\n  },\n\n  get systemId() {\n    return this._systemId || null;\n  },\n\n  set systemId(value) {\n    this._systemId = value;\n  },\n\n  get publicId() {\n    return this._publicId || null;\n  },\n\n  set publicId(value) {\n    this._publicId = value;\n  },\n\n  get baseURI() {\n    return this._baseURI || null;\n  },\n\n  set baseURI(value) {\n    this._baseURI = value;\n  },\n\n  get encoding() {\n    return this._encoding || null;\n  },\n\n  set encoding(value) {\n    this._encoding = value;\n  },\n\n  get certifiedText() {\n    return this._certifiedText || null;\n  },\n\n  set certifiedText(value) {\n    this._certifiedText = value;\n  }\n\n};\n\nls.LSResourceResolver = function LSResourceResolver() {}; // @returns LSInput\n\n\nls.LSResourceResolver.prototype.resolveResource = function (type, namespaceURI, publicId, systemId, baseURI) {\n  return new ls.LSInput();\n};\n\nls.LSParserFilter = function LSParserFilter() {};\n\nls.LSParserFilter.prototype = {\n  // Constants returned by startElement and acceptNode\n  FILTER_ACCEPT: 1,\n  FILTER_REJECT: 2,\n  FILTER_SKIP: 3,\n  FILTER_INTERRUPT: 4,\n\n  get whatToShow() {\n    return this._whatToShow;\n  },\n\n  // @returns int\n  startElement: function (\n  /* Element */\n  elementArg) {\n    return 0;\n  },\n  // @returns int\n  acceptNode: function (\n  /* Node */\n  nodeArg) {\n    return nodeArg;\n  }\n};\n\nls.LSSerializer = function LSSerializer() {\n  this._domConfig = new core.DOMConfiguration();\n};\n\nls.LSSerializer.prototype = {\n  get domConfig() {\n    return this._domConfig;\n  },\n\n  get newLine() {\n    return this._newLine || null;\n  },\n\n  set newLine(value) {\n    this._newLine = value;\n  },\n\n  get filter() {\n    return this._filter || null;\n  },\n\n  set filter(value) {\n    this._filter = value;\n  },\n\n  // @returns boolean\n  // @raises LSException\n  write: function (\n  /* Node */\n  nodeArg,\n  /* LSOutput */\n  destination) {\n    return true;\n  },\n  // @returns boolean\n  // @raises LSException\n  writeToURI: function (\n  /* Node */\n  nodeArg,\n  /* string */\n  uri) {\n    return true;\n  },\n  // @returns string\n  // @raises DOMException, LSException\n  writeToString: function (\n  /* Node */\n  nodeArg) {\n    return \"\";\n  }\n};\n\nls.LSOutput = function LSOutput() {};\n\nls.LSOutput.prototype = {\n  get characterStream() {\n    return this._characterStream || null;\n  },\n\n  set characterStream(value) {\n    this._characterStream = value;\n  },\n\n  get byteStream() {\n    return this._byteStream || null;\n  },\n\n  set byteStream(value) {\n    this._byteStream = value;\n  },\n\n  get systemId() {\n    return this._systemId || null;\n  },\n\n  set systemId(value) {\n    this._systemId = value;\n  },\n\n  get encoding() {\n    return this._encoding || null;\n  },\n\n  set encoding(value) {\n    this._encoding = value;\n  }\n\n};\n\nls.LSProgressEvent = function LSProgressEvent() {};\n\nls.LSProgressEvent.prototype = {\n  get input() {\n    return this._input;\n  },\n\n  get position() {\n    return this._position;\n  },\n\n  get totalSize() {\n    return this._totalSize;\n  }\n\n};\nls.LSProgressEvent.prototype.__proto__ = events.Event;\n\nls.LSLoadEvent = function LSLoadEvent() {};\n\nls.LSLoadEvent.prototype = {\n  get newDocument() {\n    return this._newDocument;\n  },\n\n  get input() {\n    return this._input;\n  }\n\n};\nls.LSLoadEvent.prototype.__proto__ = events.Event; // TODO: do traversal\n\nls.LSSerializerFilter = function LSSerializerFilter() {};\n\nls.LSSerializerFilter.prototype = {\n  get whatToShow() {\n    return this._whatToShow;\n  }\n\n}; // ls.LSSerializerFilter.prototype.__proto__ = level2.traversal.NodeFiler;\n// Export\n\nmodule.exports.dom = {\n  level3: {\n    ls: ls\n  }\n};","map":null,"metadata":{},"sourceType":"script"}