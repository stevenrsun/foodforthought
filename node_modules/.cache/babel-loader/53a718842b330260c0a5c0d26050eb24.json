{"ast":null,"code":"var core = require(\"../level1/core\").dom.level1.core; // modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325\n\n\ncore = Object.create(core);\nvar INVALID_STATE_ERR = core.INVALID_STATE_ERR = 11,\n    SYNTAX_ERR = core.SYNTAX_ERR = 12,\n    INVALID_MODIFICATION_ERR = core.INVALID_MODIFICATION_ERR = 13,\n    NAMESPACE_ERR = core.NAMESPACE_ERR = 14,\n    INVALID_ACCESS_ERR = core.INVALID_ACCESS_ERR = 15,\n    ns = {\n  validate: function (ns, URI) {\n    if (!ns) {\n      throw new core.DOMException(core.INVALID_CHARACTER_ERR, \"namespace is undefined\");\n    }\n\n    if (ns.match(/[^0-9a-z\\.:\\-_]/i) !== null) {\n      throw new core.DOMException(core.INVALID_CHARACTER_ERR, ns);\n    }\n\n    var msg = false,\n        parts = ns.split(':');\n\n    if (ns === 'xmlns' && URI !== \"http://www.w3.org/2000/xmlns/\") {\n      msg = \"localName is 'xmlns' but the namespaceURI is invalid\";\n    } else if (ns === \"xml\" && URI !== \"http://www.w3.org/XML/1998/namespace\") {\n      msg = \"localName is 'xml' but the namespaceURI is invalid\";\n    } else if (ns[ns.length - 1] === ':') {\n      msg = \"Namespace seperator found with no localName\";\n    } else if (ns[0] === ':') {\n      msg = \"Namespace seperator found, without a prefix\";\n    } else if (parts.length > 2) {\n      msg = \"Too many namespace seperators\";\n    }\n\n    if (msg) {\n      throw new core.DOMException(NAMESPACE_ERR, msg + \" (\" + ns + \"@\" + URI + \")\");\n    }\n  }\n};\ncore.exceptionMessages['NAMESPACE_ERR'] = \"Invalid namespace\";\n\ncore.DOMImplementation.prototype.createDocumentType = function (\n/* String */\nqualifiedName,\n/* String */\npublicId,\n/* String */\nsystemId) {\n  ns.validate(qualifiedName);\n  var doctype = new core.DocumentType(null, qualifiedName);\n  doctype._publicId = publicId ? publicId : '';\n  doctype._systemId = systemId ? systemId : '';\n  return doctype;\n};\n/**\n  Creates an XML Document object of the specified type with its document element.\n  HTML-only DOM implementations do not need to implement this method.\n*/\n\n\ncore.DOMImplementation.prototype.createDocument = function (\n/* String */\nnamespaceURI,\n/* String */\nqualifiedName,\n/* DocumentType */\ndoctype) {\n  if (qualifiedName || namespaceURI) {\n    ns.validate(qualifiedName, namespaceURI);\n  }\n\n  if (doctype && doctype._ownerDocument !== null) {\n    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);\n  }\n\n  if (qualifiedName && qualifiedName.indexOf(':') > -1 && !namespaceURI) {\n    throw new core.DOMException(NAMESPACE_ERR);\n  }\n\n  var document = new core.Document();\n\n  if (doctype) {\n    document.doctype = doctype;\n    doctype._ownerDocument = document;\n    document.appendChild(doctype);\n  } else {\n    document.doctype = null;\n  }\n\n  if (doctype && !doctype.entities) {\n    doctype.entities = new dom.EntityNodeMap();\n  }\n\n  document._ownerDocument = document;\n\n  if (qualifiedName) {\n    var docElement = document.createElementNS(namespaceURI, qualifiedName);\n    document.appendChild(docElement);\n  }\n\n  return document;\n};\n\ncore.Node.prototype.__defineGetter__(\"ownerDocument\", function () {\n  return this._ownerDocument || null;\n});\n\ncore.Node.prototype.isSupported = function (\n/* string */\nfeature,\n/* string */\nversion) {\n  return this._ownerDocument.implementation.hasFeature(feature, version);\n};\n\ncore.Node.prototype._namespaceURI = null;\n\ncore.Node.prototype.__defineGetter__(\"namespaceURI\", function () {\n  return this._namespaceURI || null;\n});\n\ncore.Node.prototype.__defineSetter__(\"namespaceURI\", function (value) {\n  this._namespaceURI = value;\n});\n\ncore.Node.prototype.__defineGetter__(\"prefix\", function () {\n  return this._prefix || null;\n});\n\ncore.Node.prototype.__defineSetter__(\"prefix\", function (value) {\n  if (this.readonly) {\n    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  ns.validate(value, this._namespaceURI);\n\n  if (this._created && !this._namespaceURI || this._prefix === \"xmlns\" || !this._prefix && this._created) {\n    throw new core.DOMException(core.NAMESPACE_ERR);\n  }\n\n  if (this._localName) {\n    this._nodeName = value + ':' + this._localName;\n  }\n\n  this._prefix = value;\n});\n\ncore.Node.prototype.__defineGetter__(\"localName\", function () {\n  return this._localName || null;\n});\n/* return boolean */\n\n\ncore.Node.prototype.hasAttributes = function () {\n  return this.nodeType === this.ELEMENT_NODE && this._attributes && this._attributes.length > 0;\n};\n\ncore.NamedNodeMap.prototype.getNamedItemNS = function (\n/* string */\nnamespaceURI,\n/* string */\nlocalName) {\n  if (this._nsStore[namespaceURI] && this._nsStore[namespaceURI][localName]) {\n    return this._nsStore[namespaceURI][localName];\n  }\n\n  return null;\n};\n\ncore.AttrNodeMap.prototype.setNamedItemNS = function (\n/* Node */\narg) {\n  if (arg.nodeType !== this._ownerDocument.ATTRIBUTE_NODE) {\n    throw new core.DOMException(core.HIERARCHY_REQUEST_ERR);\n  }\n\n  return core.NamedNodeMap.prototype.setNamedItemNS.call(this, arg);\n};\n\nvar prevSetNamedItem = core.AttrNodeMap.prototype.setNamedItem;\n\ncore.AttrNodeMap.prototype.setNamedItem = function (\n/* Node */\narg) {\n  if (arg.nodeType !== this._ownerDocument.ATTRIBUTE_NODE) {\n    throw new core.DOMException(core.HIERARCHY_REQUEST_ERR);\n  }\n\n  return prevSetNamedItem.call(this, arg);\n};\n\ncore.NamedNodeMap.prototype.setNamedItemNS = function (\n/* Node */\narg) {\n  if (this._readonly) {\n    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  var owner = this._ownerDocument;\n\n  if (this._parentNode && this._parentNode._parentNode && this._parentNode._parentNode.nodeType === owner.ENTITY_NODE) {\n    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  if (this._ownerDocument !== arg.ownerDocument) {\n    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);\n  }\n\n  if (arg._ownerElement) {\n    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);\n  } // readonly\n\n\n  if (this._readonly === true) {\n    throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  if (!this._nsStore[arg.namespaceURI]) {\n    this._nsStore[arg.namespaceURI] = {};\n  }\n\n  var existing = null;\n\n  if (this._nsStore[arg.namespaceURI][arg.localName]) {\n    var existing = this._nsStore[arg.namespaceURI][arg.localName];\n  }\n\n  this._nsStore[arg.namespaceURI][arg.localName] = arg;\n  arg._specified = true;\n  arg._ownerDocument = this._ownerDocument;\n  return this.setNamedItem(arg);\n};\n\ncore.NamedNodeMap.prototype.removeNamedItemNS = function (\n/*string */\nnamespaceURI,\n/* string */\nlocalName) {\n  if (this.readonly) {\n    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  var parent = this._parentNode,\n      found = null,\n      defaults,\n      clone,\n      defaultEl,\n      defaultAttr;\n\n  if (this._parentNode && this._parentNode._parentNode && this._parentNode._parentNode.nodeType === this._ownerDocument.ENTITY_NODE) {\n    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  if (this._nsStore[namespaceURI] && this._nsStore[namespaceURI][localName]) {\n    found = this._nsStore[namespaceURI][localName];\n    this.removeNamedItem(found.qualifiedName);\n    delete this._nsStore[namespaceURI][localName];\n  }\n\n  if (!found) {\n    throw new core.DOMException(core.NOT_FOUND_ERR);\n  }\n\n  if (parent.ownerDocument.doctype && parent.ownerDocument.doctype._attributes) {\n    defaults = parent.ownerDocument.doctype._attributes;\n    defaultEl = defaults.getNamedItemNS(parent._namespaceURI, parent._localName);\n  }\n\n  if (defaultEl) {\n    defaultAttr = defaultEl._attributes.getNamedItemNS(namespaceURI, localName);\n\n    if (defaultAttr) {\n      clone = defaultAttr.cloneNode(true);\n      clone._created = false;\n      clone._namespaceURI = found._namespaceURI;\n      clone._nodeName = found.name;\n      clone._localName = found._localName;\n      clone._prefix = found._prefix;\n      this.setNamedItemNS(clone);\n      clone._created = true;\n      clone._specified = false;\n    }\n  }\n\n  return found;\n};\n\ncore.Attr.prototype.__defineGetter__(\"ownerElement\", function () {\n  return this._ownerElement || null;\n});\n\ncore.Node.prototype._prefix = false;\n\ncore.Node.prototype.__defineSetter__(\"qualifiedName\", function (qualifiedName) {\n  ns.validate(qualifiedName, this._namespaceURI);\n  qualifiedName = qualifiedName || \"\";\n  this._localName = qualifiedName.split(\":\")[1] || null;\n  this.prefix = qualifiedName.split(\":\")[0] || null;\n  this._nodeName = qualifiedName;\n});\n\ncore.Node.prototype.__defineGetter__(\"qualifiedName\", function () {\n  return this._nodeName;\n});\n\ncore.NamedNodeMap.prototype._map = function (fn) {\n  var ret = [],\n      l = this.length,\n      i = 0,\n      node;\n\n  for (i; i < l; i++) {\n    node = this.item(i);\n\n    if (fn && fn(node)) {\n      ret.push(node);\n    }\n  }\n\n  return ret;\n};\n\ncore.Element.prototype.getAttributeNS = function (\n/* string */\nnamespaceURI,\n/* string */\nlocalName) {\n  var attr = this._attributes.getNamedItemNS(namespaceURI, localName);\n\n  return attr ? attr.nodeValue : '';\n};\n\ncore.Element.prototype.setAttributeNS = function (\n/* string */\nnamespaceURI,\n/* string */\nqualifiedName,\n/* string */\nvalue) {\n  var s = qualifiedName.split(':'),\n      local = s.pop(),\n      prefix = s.pop() || null,\n      attr;\n  ns.validate(qualifiedName, namespaceURI);\n\n  if (qualifiedName.split(':').shift() === \"xml\" && namespaceURI !== \"http://www.w3.org/XML/1998/namespace\") {\n    throw new core.DOMException(core.NAMESPACE_ERR);\n  }\n\n  if (prefix === \"xmlns\" && namespaceURI !== \"http://www.w3.org/2000/xmlns/\") {\n    throw new core.DOMException(core.NAMESPACE_ERR);\n  }\n\n  if (qualifiedName.split(':').length > 1 && !namespaceURI) {\n    throw new core.DOMException(core.NAMESPACE_ERR);\n  }\n\n  attr = this._attributes.getNamedItemNS(namespaceURI, local);\n\n  if (!attr) {\n    attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName, value);\n\n    this._attributes.setNamedItemNS(attr);\n  }\n\n  attr._namespaceURI = namespaceURI;\n  attr._prefix = prefix;\n  attr._created = true;\n  attr.value = value;\n  attr._localName = local;\n};\n\ncore.Element.prototype.removeAttributeNS = function (\n/* string */\nnamespaceURI,\n/* string */\nlocalName) {\n  if (this.readonly) {\n    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);\n  }\n\n  var ownerDoc = this.ownerDocument,\n      defaults,\n      clone,\n      defaultEl,\n      defaultAttr,\n      clone,\n      localName;\n\n  if (ownerDoc.doctype && ownerDoc.doctype._attributes) {\n    defaults = ownerDoc.doctype._attributes;\n    defaultEl = defaults.getNamedItemNS(namespaceURI, this.localName);\n  }\n\n  if (defaultEl) {\n    defaultAttr = defaultEl.getAttributeNodeNS(namespaceURI, localName);\n  }\n\n  this._attributes.removeNamedItemNS(namespaceURI, localName);\n\n  if (defaultAttr) {\n    this.setAttributeNS(defaultAttr.namespaceURI, defaultAttr.name, defaultAttr.value);\n    localName = defaultAttr.name.split(':').pop();\n    clone = this.getAttributeNS(defaultAttr.namespaceURI, localName);\n    clone._specified = false;\n  }\n};\n\ncore.Element.prototype.getAttributeNodeNS = function (\n/* string */\nnamespaceURI,\n/* string */\nlocalName) {\n  return this._attributes.getNamedItemNS(namespaceURI, localName);\n};\n\ncore.Element.prototype._created = false;\n\ncore.Element.prototype.setAttributeNodeNS = function (\n/* Attr */\nnewAttr) {\n  if (newAttr.ownerElement) {\n    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);\n  }\n\n  var existing = null;\n\n  try {\n    existing = this._attributes.removeNamedItemNS(newAttr.namespaceURI, newAttr.localName);\n  } catch (e) {\n    /* noop */\n  }\n\n  return this._attributes.setNamedItemNS(newAttr) || existing;\n};\n\ncore.Element.prototype.getElementsByTagNameNS = function (\n/* String */\nnamespaceURI,\n/* String */\nlocalName) {\n  var nsPrefixCache = {};\n\n  function filterByTagName(child) {\n    if (child.nodeType && child.nodeType === this.ENTITY_REFERENCE_NODE) {\n      child = child._entity;\n    }\n\n    var localMatch = child.localName === localName,\n        nsMatch = child.namespaceURI === namespaceURI;\n\n    if ((localMatch || localName === \"*\") && (nsMatch || namespaceURI === \"*\")) {\n      if (child.nodeType === child.ELEMENT_NODE) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return new core.NodeList(this.ownerDocument || this, core.mapper(this, filterByTagName));\n};\n\ncore.Element.prototype.hasAttribute = function (\n/* string */\nname) {\n  if (!this._attributes) {\n    return false;\n  }\n\n  return this._attributes.exists(name);\n};\n\ncore.Element.prototype.hasAttributeNS = function (\n/* string */\nnamespaceURI,\n/* string */\nlocalName) {\n  if (this._attributes.getNamedItemNS(namespaceURI, localName)) {\n    return true;\n  } else if (this.hasAttribute(localName)) {\n    return true;\n  }\n\n  return false;\n};\n\ncore.DocumentType.prototype.__defineGetter__(\"publicId\", function () {\n  return this._publicId || \"\";\n});\n\ncore.DocumentType.prototype.__defineGetter__(\"systemId\", function () {\n  return this._systemId || \"\";\n});\n\ncore.DocumentType.prototype.__defineGetter__(\"internalSubset\", function () {\n  return this._internalSubset || null;\n});\n\ncore.Document.prototype.importNode = function (\n/* Node */\nimportedNode,\n/* bool */\ndeep) {\n  if (importedNode && importedNode.nodeType) {\n    if (importedNode.nodeType === this.DOCUMENT_NODE || importedNode.nodeType === this.DOCUMENT_TYPE_NODE) {\n      throw new core.DOMException(core.NOT_SUPPORTED_ERR);\n    }\n  }\n\n  var self = this,\n      newNode = importedNode.cloneNode(deep, function (a, b) {\n    b._namespaceURI = a._namespaceURI;\n    b._nodeName = a._nodeName;\n    b._localName = a._localName;\n  }),\n      defaults = false,\n      defaultEl;\n\n  if (this.doctype && this.doctype._attributes) {\n    defaults = this.doctype._attributes;\n  }\n\n  function lastChance(el) {\n    var attr, defaultEl;\n    el._ownerDocument = self;\n\n    if (el.id) {\n      if (!self._ids) {\n        self._ids = {};\n      }\n\n      if (!self._ids[el.id]) {\n        self._ids[el.id] = [];\n      }\n\n      self._ids[el.id].push(el);\n    }\n\n    if (el._attributes) {\n      el._attributes._ownerDocument = self;\n\n      for (var i = 0, len = el._attributes.length; i < len; i++) {\n        attr = el._attributes.item(i);\n        attr._ownerDocument = self;\n        attr._specified = true;\n      }\n    }\n\n    if (defaults) {\n      defaultEl = defaults.getNamedItemNS(el._namespaceURI, el._localName); // TODO: This could use some love\n\n      if (defaultEl) {\n        defaultEl._attributes._map(function (defaultAttr) {\n          if (!el.hasAttributeNS(defaultAttr.namespaceURL, defaultAttr.localName)) {\n            var clone = defaultAttr.cloneNode(true);\n            clone._namespaceURI = defaultAttr._namespaceURI;\n            clone._prefix = defaultAttr._prefix;\n            clone._localName = defaultAttr._localName;\n            el.setAttributeNodeNS(clone);\n            clone._specified = false;\n          }\n        });\n      }\n    }\n  }\n\n  if (deep) {\n    core.visitTree(newNode, lastChance);\n  } else {\n    lastChance(newNode);\n  }\n\n  if (newNode.nodeType == newNode.ATTRIBUTE_NODE) {\n    newNode._specified = true;\n  }\n\n  return newNode;\n};\n\ncore.Document.prototype.createElementNS = function (\n/* string */\nnamespaceURI,\n/* string */\nqualifiedName) {\n  var parts = qualifiedName.split(':'),\n      element,\n      prefix;\n\n  if (parts.length > 1 && !namespaceURI) {\n    throw new core.DOMException(core.NAMESPACE_ERR);\n  }\n\n  ns.validate(qualifiedName, namespaceURI);\n  element = this.createElement(qualifiedName), element._created = false;\n  element._namespaceURI = namespaceURI;\n  element._nodeName = qualifiedName;\n  element._localName = parts.pop();\n\n  if (parts.length > 0) {\n    prefix = parts.pop();\n    element.prefix = prefix;\n  }\n\n  element._created = true;\n  return element;\n};\n\ncore.Document.prototype.createAttributeNS = function (\n/* string */\nnamespaceURI,\n/* string */\nqualifiedName) {\n  var attribute,\n      parts = qualifiedName.split(':');\n\n  if (parts.length > 1 && !namespaceURI) {\n    throw new core.DOMException(core.NAMESPACE_ERR, \"Prefix specified without namespaceURI (\" + qualifiedName + \")\");\n  }\n\n  ns.validate(qualifiedName, namespaceURI);\n  attribute = this.createAttribute(qualifiedName);\n  attribute.namespaceURI = namespaceURI;\n  attribute.qualifiedName = qualifiedName;\n  attribute._localName = parts.pop();\n  attribute._prefix = parts.length > 0 ? parts.pop() : null;\n  return attribute;\n};\n\ncore.Document.prototype.getElementsByTagNameNS = function (\n/* String */\nnamespaceURI,\n/* String */\nlocalName) {\n  return core.Element.prototype.getElementsByTagNameNS.call(this, namespaceURI, localName);\n};\n\ncore.Element.prototype.__defineSetter__(\"id\", function (id) {\n  this.setAttribute(\"id\", id);\n});\n\ncore.Element.prototype.__defineGetter__(\"id\", function () {\n  return this.getAttribute(\"id\");\n});\n\ncore.Document.prototype.getElementById = function (id) {\n  // return the first element\n  return this._ids && this._ids[id] && this._ids[id].length > 0 ? this._ids[id][0] : null;\n};\n\nexports.dom = {\n  level2: {\n    core: core\n  }\n};","map":null,"metadata":{},"sourceType":"script"}