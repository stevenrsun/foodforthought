{"ast":null,"code":"//.CommonJS\nvar CSSOM = {}; ///CommonJS\n\n/**\n * @param {string} token\n */\n\nCSSOM.parse = function parse(token) {\n  var i = 0;\n  /**\n    \"before-selector\" or\n    \"selector\" or\n    \"atRule\" or\n    \"atBlock\" or\n    \"before-name\" or\n    \"name\" or\n    \"before-value\" or\n    \"value\"\n  */\n\n  var state = \"before-selector\";\n  var index;\n  var buffer = \"\";\n  var SIGNIFICANT_WHITESPACE = {\n    \"selector\": true,\n    \"value\": true,\n    \"atRule\": true,\n    \"importRule-begin\": true,\n    \"importRule\": true,\n    \"atBlock\": true\n  };\n  var styleSheet = new CSSOM.CSSStyleSheet(); // @type CSSStyleSheet|CSSMediaRule|CSSFontFaceRule|CSSKeyframesRule\n\n  var currentScope = styleSheet; // @type CSSMediaRule|CSSKeyframesRule\n\n  var parentRule;\n  var selector,\n      name,\n      value,\n      priority = \"\",\n      styleRule,\n      mediaRule,\n      importRule,\n      fontFaceRule,\n      keyframesRule,\n      keyframeRule;\n  var atKeyframesRegExp = /@(-(?:\\w+-)+)?keyframes/g;\n\n  var parseError = function (message) {\n    var lines = token.substring(0, i).split('\\n');\n    var lineCount = lines.length;\n    var charCount = lines.pop().length + 1;\n    var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');\n    error.line = lineCount;\n    error.char = charCount;\n    error.styleSheet = styleSheet;\n    throw error;\n  };\n\n  for (var character; character = token.charAt(i); i++) {\n    switch (character) {\n      case \" \":\n      case \"\\t\":\n      case \"\\r\":\n      case \"\\n\":\n      case \"\\f\":\n        if (SIGNIFICANT_WHITESPACE[state]) {\n          buffer += character;\n        }\n\n        break;\n      // String\n\n      case '\"':\n        index = token.indexOf('\"', i + 1) + 1;\n\n        if (!index) {\n          parseError('Unmatched \"');\n        }\n\n        buffer += token.slice(i, index);\n        i = index - 1;\n\n        switch (state) {\n          case 'before-value':\n            state = 'value';\n            break;\n\n          case 'importRule-begin':\n            state = 'importRule';\n            break;\n        }\n\n        break;\n\n      case \"'\":\n        index = token.indexOf(\"'\", i + 1) + 1;\n\n        if (!index) {\n          parseError(\"Unmatched '\");\n        }\n\n        buffer += token.slice(i, index);\n        i = index - 1;\n\n        switch (state) {\n          case 'before-value':\n            state = 'value';\n            break;\n\n          case 'importRule-begin':\n            state = 'importRule';\n            break;\n        }\n\n        break;\n      // Comment\n\n      case \"/\":\n        if (token.charAt(i + 1) === \"*\") {\n          i += 2;\n          index = token.indexOf(\"*/\", i);\n\n          if (index === -1) {\n            parseError(\"Missing */\");\n          } else {\n            i = index + 1;\n          }\n        } else {\n          buffer += character;\n        }\n\n        if (state === \"importRule-begin\") {\n          buffer += \" \";\n          state = \"importRule\";\n        }\n\n        break;\n      // At-rule\n\n      case \"@\":\n        if (token.indexOf(\"@media\", i) === i) {\n          state = \"atBlock\";\n          mediaRule = new CSSOM.CSSMediaRule();\n          mediaRule.__starts = i;\n          i += \"media\".length;\n          buffer = \"\";\n          break;\n        } else if (token.indexOf(\"@import\", i) === i) {\n          state = \"importRule-begin\";\n          i += \"import\".length;\n          buffer += \"@import\";\n          break;\n        } else if (token.indexOf(\"@font-face\", i) === i) {\n          state = \"fontFaceRule-begin\";\n          i += \"font-face\".length;\n          fontFaceRule = new CSSOM.CSSFontFaceRule();\n          fontFaceRule.__starts = i;\n          buffer = \"\";\n          break;\n        } else {\n          atKeyframesRegExp.lastIndex = i;\n          var matchKeyframes = atKeyframesRegExp.exec(token);\n\n          if (matchKeyframes && matchKeyframes.index === i) {\n            state = \"keyframesRule-begin\";\n            keyframesRule = new CSSOM.CSSKeyframesRule();\n            keyframesRule.__starts = i;\n            keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found\n\n            i += matchKeyframes[0].length - 1;\n            buffer = \"\";\n            break;\n          } else if (state == \"selector\") {\n            state = \"atRule\";\n          }\n        }\n\n        buffer += character;\n        break;\n\n      case \"{\":\n        if (state === \"selector\" || state === \"atRule\") {\n          styleRule.selectorText = buffer.trim();\n          styleRule.style.__starts = i;\n          buffer = \"\";\n          state = \"before-name\";\n        } else if (state === \"atBlock\") {\n          mediaRule.media.mediaText = buffer.trim();\n          currentScope = parentRule = mediaRule;\n          mediaRule.parentStyleSheet = styleSheet;\n          buffer = \"\";\n          state = \"before-selector\";\n        } else if (state === \"fontFaceRule-begin\") {\n          if (parentRule) {\n            fontFaceRule.parentRule = parentRule;\n          }\n\n          fontFaceRule.parentStyleSheet = styleSheet;\n          styleRule = fontFaceRule;\n          buffer = \"\";\n          state = \"before-name\";\n        } else if (state === \"keyframesRule-begin\") {\n          keyframesRule.name = buffer.trim();\n\n          if (parentRule) {\n            keyframesRule.parentRule = parentRule;\n          }\n\n          keyframesRule.parentStyleSheet = styleSheet;\n          currentScope = parentRule = keyframesRule;\n          buffer = \"\";\n          state = \"keyframeRule-begin\";\n        } else if (state === \"keyframeRule-begin\") {\n          styleRule = new CSSOM.CSSKeyframeRule();\n          styleRule.keyText = buffer.trim();\n          styleRule.__starts = i;\n          buffer = \"\";\n          state = \"before-name\";\n        }\n\n        break;\n\n      case \":\":\n        if (state === \"name\") {\n          name = buffer.trim();\n          buffer = \"\";\n          state = \"before-value\";\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case '(':\n        if (state === 'value') {\n          index = token.indexOf(')', i + 1);\n\n          if (index === -1) {\n            parseError('Unmatched \"(\"');\n          }\n\n          buffer += token.slice(i, index + 1);\n          i = index;\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \"!\":\n        if (state === \"value\" && token.indexOf(\"!important\", i) === i) {\n          priority = \"important\";\n          i += \"important\".length;\n        } else {\n          buffer += character;\n        }\n\n        break;\n\n      case \";\":\n        switch (state) {\n          case \"value\":\n            styleRule.style.setProperty(name, buffer.trim(), priority);\n            priority = \"\";\n            buffer = \"\";\n            state = \"before-name\";\n            break;\n\n          case \"atRule\":\n            buffer = \"\";\n            state = \"before-selector\";\n            break;\n\n          case \"importRule\":\n            importRule = new CSSOM.CSSImportRule();\n            importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;\n            importRule.cssText = buffer + character;\n            styleSheet.cssRules.push(importRule);\n            buffer = \"\";\n            state = \"before-selector\";\n            break;\n\n          default:\n            buffer += character;\n            break;\n        }\n\n        break;\n\n      case \"}\":\n        switch (state) {\n          case \"value\":\n            styleRule.style.setProperty(name, buffer.trim(), priority);\n            priority = \"\";\n\n          case \"before-name\":\n          case \"name\":\n            styleRule.__ends = i + 1;\n\n            if (parentRule) {\n              styleRule.parentRule = parentRule;\n            }\n\n            styleRule.parentStyleSheet = styleSheet;\n            currentScope.cssRules.push(styleRule);\n            buffer = \"\";\n\n            if (currentScope.constructor === CSSOM.CSSKeyframesRule) {\n              state = \"keyframeRule-begin\";\n            } else {\n              state = \"before-selector\";\n            }\n\n            break;\n\n          case \"keyframeRule-begin\":\n          case \"before-selector\":\n          case \"selector\":\n            // End of media rule.\n            if (!parentRule) {\n              parseError(\"Unexpected }\");\n            }\n\n            currentScope.__ends = i + 1; // Nesting rules aren't supported yet\n\n            styleSheet.cssRules.push(currentScope);\n            currentScope = styleSheet;\n            parentRule = null;\n            buffer = \"\";\n            state = \"before-selector\";\n            break;\n        }\n\n        break;\n\n      default:\n        switch (state) {\n          case \"before-selector\":\n            state = \"selector\";\n            styleRule = new CSSOM.CSSStyleRule();\n            styleRule.__starts = i;\n            break;\n\n          case \"before-name\":\n            state = \"name\";\n            break;\n\n          case \"before-value\":\n            state = \"value\";\n            break;\n\n          case \"importRule-begin\":\n            state = \"importRule\";\n            break;\n        }\n\n        buffer += character;\n        break;\n    }\n  }\n\n  return styleSheet;\n}; //.CommonJS\n\n\nexports.parse = CSSOM.parse; // The following modules cannot be included sooner due to the mutual dependency with parse.js\n\nCSSOM.CSSStyleSheet = require(\"./CSSStyleSheet\").CSSStyleSheet;\nCSSOM.CSSStyleRule = require(\"./CSSStyleRule\").CSSStyleRule;\nCSSOM.CSSImportRule = require(\"./CSSImportRule\").CSSImportRule;\nCSSOM.CSSMediaRule = require(\"./CSSMediaRule\").CSSMediaRule;\nCSSOM.CSSFontFaceRule = require(\"./CSSFontFaceRule\").CSSFontFaceRule;\nCSSOM.CSSStyleDeclaration = require('./CSSStyleDeclaration').CSSStyleDeclaration;\nCSSOM.CSSKeyframeRule = require('./CSSKeyframeRule').CSSKeyframeRule;\nCSSOM.CSSKeyframesRule = require('./CSSKeyframesRule').CSSKeyframesRule; ///CommonJS","map":null,"metadata":{},"sourceType":"script"}