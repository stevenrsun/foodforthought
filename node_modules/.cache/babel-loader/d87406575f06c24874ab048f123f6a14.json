{"ast":null,"code":"var http = require('http'),\n    URL = require('url'),\n    HtmlToDom = require('./htmltodom').HtmlToDom,\n    domToHtml = require('./domtohtml').domToHtml,\n    htmlencoding = require('./htmlencoding'),\n    HTMLEncode = htmlencoding.HTMLEncode,\n    HTMLDecode = htmlencoding.HTMLDecode,\n    jsdom = require('../../jsdom'),\n    Contextify = null;\n\ntry {\n  Contextify = require('contextify');\n} catch (e) {\n  // Shim for when the contextify compilation fails.\n  // This is not quite as correct, but it gets the job done.\n  Contextify = function (sandbox) {\n    var vm = require('vm');\n\n    var context = vm.createContext(sandbox);\n    var global = null;\n\n    sandbox.run = function (code, filename) {\n      return vm.runInContext(code, context, filename);\n    };\n\n    sandbox.getGlobal = function () {\n      if (!global) {\n        global = vm.runInContext('this', context);\n      }\n\n      return global;\n    };\n\n    sandbox.dispose = function () {\n      global = null;\n\n      sandbox.run = function () {\n        throw new Error(\"Called run() after dispose().\");\n      };\n\n      sandbox.getGlobal = function () {\n        throw new Error(\"Called getGlobal() after dispose().\");\n      };\n\n      sandbox.dispose = function () {\n        throw new Error(\"Called dispose() after dispose().\");\n      };\n    };\n\n    return sandbox;\n  };\n}\n\nfunction NOT_IMPLEMENTED(target) {\n  return function () {\n    if (!jsdom.debugMode) {\n      var raise = target ? target.raise : this.raise;\n      raise.call(this, 'error', 'NOT IMPLEMENTED');\n    }\n  };\n}\n/**\n * Creates a window having a document. The document can be passed as option,\n * if omitted, a new document will be created.\n */\n\n\nexports.windowAugmentation = function (dom, options) {\n  options = options || {};\n  var window = exports.createWindow(dom, options);\n\n  if (!options.document) {\n    var browser = browserAugmentation(dom, options);\n\n    if (options.features && options.features.QuerySelector) {\n      require(__dirname + \"/../selectors/index\").applyQuerySelectorPrototype(browser);\n    }\n\n    options.document = browser.HTMLDocument ? new browser.HTMLDocument(options) : new browser.Document(options);\n    options.document.write('<html><head></head><body></body></html>');\n  }\n\n  var doc = window.document = options.document;\n\n  if (doc.addEventListener) {\n    if (doc.readyState == 'complete') {\n      var ev = doc.createEvent('HTMLEvents');\n      ev.initEvent('load', false, false);\n      window.dispatchEvent(ev);\n    } else {\n      doc.addEventListener('load', function (ev) {\n        window.dispatchEvent(ev);\n      });\n    }\n  }\n\n  return window;\n};\n/**\n * Creates a document-less window.\n */\n\n\nexports.createWindow = function (dom, options) {\n  var timers = [];\n\n  function startTimer(startFn, stopFn, callback, ms) {\n    var res = startFn(callback, ms);\n    timers.push([res, stopFn]);\n    return res;\n  }\n\n  function stopTimer(id) {\n    if (typeof id === 'undefined') {\n      return;\n    }\n\n    for (var i in timers) {\n      if (timers[i][0] === id) {\n        timers[i][1].call(this, id);\n        timers.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  function stopAllTimers() {\n    timers.forEach(function (t) {\n      t[1].call(this, t[0]);\n    });\n    timers = [];\n  }\n\n  function DOMWindow(options) {\n    var href = (options || {}).url || 'file://' + __filename;\n    this.location = URL.parse(href);\n    this.location.reload = NOT_IMPLEMENTED(this);\n    this.location.replace = NOT_IMPLEMENTED(this);\n\n    this.location.toString = function () {\n      return href;\n    };\n\n    var window = this.console._window = this;\n    /* Location hash support */\n\n    this.location.__defineGetter__(\"hash\", function () {\n      return window.location.href.split(\"#\").length > 1 ? \"#\" + window.location.href.split(\"#\")[1] : \"\";\n    });\n\n    this.location.__defineSetter__(\"hash\", function (val) {\n      /* TODO: Should fire a hashchange event, but tests aren't working */\n      window.location.href = window.location.href.split(\"#\")[0] + val;\n    });\n    /* Location search support */\n\n\n    this.location.__defineGetter__(\"search\", function () {\n      return window.location.href.split(\"?\").length > 1 ? \"?\" + window.location.href.match(/\\?([^#]+)/)[1] : \"\";\n    });\n\n    this.location.__defineSetter__(\"search\", function (val) {\n      window.location.href = window.location.href.indexOf(\"?\") > 0 ? window.location.href.replace(/\\?([^#]+)/, val) : window.location.href.match(/^([^#?]+)/)[0] + val + window.location.hash;\n    });\n\n    if (options && options.document) {\n      options.document.location = this.location;\n    }\n\n    this.addEventListener = function () {\n      dom.Node.prototype.addEventListener.apply(window, arguments);\n    };\n\n    this.removeEventListener = function () {\n      dom.Node.prototype.removeEventListener.apply(window, arguments);\n    };\n\n    this.dispatchEvent = function () {\n      dom.Node.prototype.dispatchEvent.apply(window, arguments);\n    };\n\n    this.raise = function () {\n      dom.Node.prototype.raise.apply(window.document, arguments);\n    };\n\n    this.setTimeout = function (fn, ms) {\n      return startTimer(setTimeout, clearTimeout, fn, ms);\n    };\n\n    this.setInterval = function (fn, ms) {\n      return startTimer(setInterval, clearInterval, fn, ms);\n    };\n\n    this.clearInterval = stopTimer;\n    this.clearTimeout = stopTimer;\n    this.__stopAllTimers = stopAllTimers;\n  }\n\n  DOMWindow.prototype = {\n    __proto__: dom,\n    // This implements window.frames.length, since window.frames returns a\n    // self reference to the window object.  This value is incremented in the\n    // HTMLFrameElement init function (see: level2/html.js).\n    _length: 0,\n\n    get length() {\n      return this._length;\n    },\n\n    close: function () {\n      // Recursively close child frame windows, then ourselves.\n      var currentWindow = this;\n\n      (function windowCleaner(window) {\n        var i; // We could call window.frames.length etc, but window.frames just points\n        // back to window.\n\n        if (window.length > 0) {\n          for (i = 0; i < window.length; i++) {\n            windowCleaner(window[i]);\n          }\n        } // We're already in our own window.close().\n\n\n        if (window !== currentWindow) {\n          window.close();\n        }\n      })(this);\n\n      if (this.document) {\n        if (this.document.body) {\n          this.document.body.innerHTML = \"\";\n        }\n\n        if (this.document.close) {\n          // We need to empty out the event listener array because\n          // document.close() causes 'load' event to re-fire.\n          this.document._listeners = [];\n          this.document.close();\n        }\n\n        delete this.document;\n      }\n\n      stopAllTimers(); // Clean up the window's execution context.\n      // dispose() is added by Contextify.\n\n      this.dispose();\n    },\n    getComputedStyle: function (node) {\n      var s = node.style,\n          cs = {};\n\n      for (var n in s) {\n        cs[n] = s[n];\n      }\n\n      cs.__proto__ = {\n        getPropertyValue: function (name) {\n          return node.style[name];\n        }\n      };\n      return cs;\n    },\n    console: {\n      log: function (message) {\n        this._window.raise('log', message);\n      },\n      info: function (message) {\n        this._window.raise('info', message);\n      },\n      warn: function (message) {\n        this._window.raise('warn', message);\n      },\n      error: function (message) {\n        this._window.raise('error', message);\n      }\n    },\n    navigator: {\n      userAgent: 'Node.js (' + process.platform + '; U; rv:' + process.version + ')',\n      appName: 'Node.js jsDom',\n      platform: process.platform,\n      appVersion: process.version\n    },\n    XMLHttpRequest: function XMLHttpRequest() {},\n    name: 'nodejs',\n    innerWidth: 1024,\n    innerHeight: 768,\n    outerWidth: 1024,\n    outerHeight: 768,\n    pageXOffset: 0,\n    pageYOffset: 0,\n    screenX: 0,\n    screenY: 0,\n    screenLeft: 0,\n    screenTop: 0,\n    scrollX: 0,\n    scrollY: 0,\n    scrollTop: 0,\n    scrollLeft: 0,\n    alert: NOT_IMPLEMENTED(),\n    blur: NOT_IMPLEMENTED(),\n    confirm: NOT_IMPLEMENTED(),\n    createPopup: NOT_IMPLEMENTED(),\n    focus: NOT_IMPLEMENTED(),\n    moveBy: NOT_IMPLEMENTED(),\n    moveTo: NOT_IMPLEMENTED(),\n    open: NOT_IMPLEMENTED(),\n    print: NOT_IMPLEMENTED(),\n    prompt: NOT_IMPLEMENTED(),\n    resizeBy: NOT_IMPLEMENTED(),\n    resizeTo: NOT_IMPLEMENTED(),\n    scroll: NOT_IMPLEMENTED(),\n    scrollBy: NOT_IMPLEMENTED(),\n    scrollTo: NOT_IMPLEMENTED(),\n    screen: {\n      width: 0,\n      height: 0\n    },\n    Image: NOT_IMPLEMENTED()\n  };\n  var window = new DOMWindow(options);\n  Contextify(window); // We need to set up self references using Contextify's getGlobal() so that\n  // the global object identity is correct (window === this).\n  // See Contextify README for more info.\n\n  var global = window.getGlobal(); // Set up the window as if it's a top level window.\n  // If it's not, then references will be corrected by frame/iframe code.\n  // Note: window.frames is maintained in the HTMLFrameElement init function.\n\n  window.window = window.frames = window.self = window.parent = window.top = global;\n  return window;\n}; //Caching for HTMLParser require. HUGE performace boost.\n\n/**\n* 5000 iterations\n* Without cache: ~1800+ms\n* With cache: ~80ms\n*/\n\n\nvar defaultParser = null;\n\nfunction getDefaultParser() {\n  if (defaultParser === null) {\n    try {\n      defaultParser = require('htmlparser');\n    } catch (e) {\n      try {\n        defaultParser = require('node-htmlparser/lib/node-htmlparser');\n      } catch (e2) {\n        defaultParser = undefined;\n      }\n    }\n  }\n\n  return defaultParser;\n}\n/**\n * Augments the given DOM by adding browser-specific properties and methods (BOM).\n * Returns the augmented DOM.\n */\n\n\nvar browserAugmentation = exports.browserAugmentation = function (dom, options) {\n  if (dom._augmented) {\n    return dom;\n  }\n\n  if (!options) {\n    options = {};\n  } // set up html parser - use a provided one or try and load from library\n\n\n  var htmltodom = new HtmlToDom(options.parser || getDefaultParser());\n\n  if (!dom.HTMLDocument) {\n    dom.HTMLDocument = dom.Document;\n  }\n\n  if (!dom.HTMLDocument.prototype.write) {\n    dom.HTMLDocument.prototype.write = function (html) {\n      this.innerHTML = html;\n    };\n  }\n\n  dom.Element.prototype.getElementsByClassName = function (className) {\n    function filterByClassName(child) {\n      if (!child) {\n        return false;\n      }\n\n      if (child.nodeType && child.nodeType === dom.Node.ENTITY_REFERENCE_NODE) {\n        child = child._entity;\n      }\n\n      var classString = child.className;\n\n      if (classString) {\n        var s = classString.split(\" \");\n\n        for (var i = 0; i < s.length; i++) {\n          if (s[i] === className) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));\n  };\n\n  dom.Element.prototype.__defineGetter__('sourceIndex', function () {\n    /*\n    * According to QuirksMode:\n    * Get the sourceIndex of element x. This is also the index number for\n    * the element in the document.getElementsByTagName('*') array.\n    * http://www.quirksmode.org/dom/w3c_core.html#t77\n    */\n    var items = this.ownerDocument.getElementsByTagName('*'),\n        len = items.length;\n\n    for (var i = 0; i < len; i++) {\n      if (items[i] === this) {\n        return i;\n      }\n    }\n  });\n\n  dom.Document.prototype.__defineGetter__('outerHTML', function () {\n    return domToHtml(this);\n  });\n\n  dom.Element.prototype.__defineGetter__('outerHTML', function () {\n    return domToHtml(this);\n  });\n\n  dom.Element.prototype.__defineGetter__('innerHTML', function () {\n    if (this._tagName === 'script' && this._attributes.length > 0 && typeof this._attributes._nodes.type !== \"undefined\" && this._attributes._nodes.type._nodeValue.indexOf(\"text\") === 0) {\n      return domToHtml(this._childNodes, true, true);\n    }\n\n    return domToHtml(this._childNodes, true);\n  });\n\n  dom.Element.prototype.__defineSetter__('doctype', function () {\n    throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);\n  });\n\n  dom.Element.prototype.__defineGetter__('doctype', function () {\n    var r = null;\n\n    if (this.nodeName == '#document') {\n      if (this._doctype) {\n        r = this._doctype;\n      }\n    }\n\n    return r;\n  });\n\n  dom.Element.prototype.__defineSetter__('innerHTML', function (html) {\n    //Clear the children first:\n    var child;\n\n    while (child = this._childNodes[0]) {\n      this.removeChild(child);\n    }\n\n    if (this.nodeName === '#document') {\n      parseDocType(this, html);\n    }\n\n    if (html !== \"\" && html != null) {\n      htmltodom.appendHtmlToElement(html, this);\n    }\n\n    return html;\n  });\n\n  dom.Document.prototype.__defineGetter__('innerHTML', function () {\n    return domToHtml(this._childNodes, true);\n  });\n\n  dom.Document.prototype.__defineSetter__('innerHTML', function (html) {\n    //Clear the children first:\n    var child;\n\n    while (child = this._childNodes[0]) {\n      this.removeChild(child);\n    }\n\n    if (this.nodeName === '#document') {\n      parseDocType(this, html);\n    }\n\n    if (html !== \"\" && html != null) {\n      htmltodom.appendHtmlToElement(html, this);\n    }\n\n    return html;\n  });\n\n  var DOC_HTML5 = /<!doctype html>/i,\n      DOC_TYPE = /<!DOCTYPE (\\w(.|\\n)*)\">/i,\n      DOC_TYPE_START = '<!DOCTYPE ',\n      DOC_TYPE_END = '\">';\n\n  function parseDocType(doc, html) {\n    var publicID = '',\n        systemID = '',\n        fullDT = '',\n        name = 'HTML',\n        set = true,\n        doctype = html.match(DOC_HTML5); //Default, No doctype === null\n\n    doc._doctype = null;\n\n    if (doctype && doctype[0]) {\n      //Handle the HTML shorty doctype\n      fullDT = doctype[0];\n    } else {\n      //Parse the doctype\n      // find the start\n      var start = html.indexOf(DOC_TYPE_START),\n          end = html.indexOf(DOC_TYPE_END),\n          docString;\n\n      if (start < 0 || end < 0) {\n        return;\n      }\n\n      docString = html.substr(start, end - start + DOC_TYPE_END.length);\n      doctype = docString.replace(/[\\n\\r]/g, '').match(DOC_TYPE);\n\n      if (!doctype) {\n        return;\n      }\n\n      fullDT = doctype[0];\n      doctype = doctype[1].split(' \"');\n\n      var _id1 = doctype.length ? doctype.pop().replace(/\"/g, '') : '',\n          _id2 = doctype.length ? doctype.pop().replace(/\"/g, '') : '';\n\n      if (_id1.indexOf('-//') !== -1) {\n        publicID = _id1;\n      }\n\n      if (_id2.indexOf('-//') !== -1) {\n        publicID = _id2;\n      }\n\n      if (_id1.indexOf('://') !== -1) {\n        systemID = _id1;\n      }\n\n      if (_id2.indexOf('://') !== -1) {\n        systemID = _id2;\n      }\n\n      if (doctype.length) {\n        doctype = doctype[0].split(' ');\n        name = doctype[0].toUpperCase();\n      }\n    }\n\n    doc._doctype = new dom.DOMImplementation().createDocumentType(name, publicID, systemID);\n    doc._doctype._ownerDocument = doc;\n    doc._doctype._fullDT = fullDT;\n\n    doc._doctype.toString = function () {\n      return this._fullDT;\n    };\n  }\n\n  dom.Document.prototype.getElementsByClassName = function (className) {\n    function filterByClassName(child) {\n      if (!child) {\n        return false;\n      }\n\n      if (child.nodeType && child.nodeType === dom.Node.ENTITY_REFERENCE_NODE) {\n        child = child._entity;\n      }\n\n      var classString = child.className;\n\n      if (classString) {\n        var s = classString.split(\" \");\n\n        for (var i = 0; i < s.length; i++) {\n          if (s[i] === className) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));\n  };\n\n  dom.Element.prototype.__defineGetter__('nodeName', function (val) {\n    return this._nodeName.toUpperCase();\n  });\n\n  dom.Element.prototype.__defineGetter__('tagName', function (val) {\n    var t = this._tagName.toUpperCase(); //Document should not return a tagName\n\n\n    if (this.nodeName === '#document') {\n      t = null;\n    }\n\n    return t;\n  });\n\n  dom.Element.prototype.scrollTop = 0;\n  dom.Element.prototype.scrollLeft = 0;\n\n  dom.Document.prototype.__defineGetter__('parentWindow', function () {\n    if (!this._parentWindow) {\n      var window = exports.windowAugmentation(dom, {\n        document: this,\n        url: this.URL\n      });\n      this._parentWindow = window.getGlobal();\n    }\n\n    return this._parentWindow;\n  });\n\n  dom.Document.prototype.__defineSetter__('parentWindow', function (window) {\n    this._parentWindow = window.getGlobal();\n  });\n\n  dom.Document.prototype.__defineGetter__('defaultView', function () {\n    return this.parentWindow;\n  });\n\n  dom._augmented = true;\n  return dom;\n};","map":null,"metadata":{},"sourceType":"script"}