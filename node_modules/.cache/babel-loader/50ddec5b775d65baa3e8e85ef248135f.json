{"ast":null,"code":"/* DOM Level2 Events implemented as described here:\n *\n * http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html\n *\n */\nvar core = require(\"./core\").dom.level2.core,\n    utils = require(\"../utils\"); // modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325\n\n\ncore = Object.create(core);\nvar events = {};\n\nevents.EventException = function () {\n  if (arguments.length > 0) {\n    this._code = arguments[0];\n  } else {\n    this._code = 0;\n  }\n\n  if (arguments.length > 1) {\n    this._message = arguments[1];\n  } else {\n    this._message = \"Unspecified event type\";\n  }\n\n  Error.call(this, this._message);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, events.EventException);\n  }\n};\n\nevents.EventException.prototype = {\n  UNSPECIFIED_EVENT_TYPE_ERR: 0,\n\n  get code() {\n    return this._code;\n  }\n\n};\nevents.EventException.prototype.__proto__ = Error.prototype;\n\nevents.Event = function (eventType) {\n  this._eventType = eventType;\n  this._type = null;\n  this._bubbles = null;\n  this._cancelable = null;\n  this._target = null;\n  this._currentTarget = null;\n  this._eventPhase = null;\n  this._timeStamp = null;\n  this._preventDefault = false;\n  this._stopPropagation = false;\n};\n\nevents.Event.prototype = {\n  initEvent: function (type, bubbles, cancelable) {\n    this._type = type;\n    this._bubbles = bubbles;\n    this._cancelable = cancelable;\n  },\n  preventDefault: function () {\n    if (this._cancelable) {\n      this._preventDefault = true;\n    }\n  },\n  stopPropagation: function () {\n    this._stopPropagation = true;\n  },\n  CAPTURING_PHASE: 1,\n  AT_TARGET: 2,\n  BUBBLING_PHASE: 3,\n\n  get eventType() {\n    return this._eventType;\n  },\n\n  get type() {\n    return this._type;\n  },\n\n  get bubbles() {\n    return this._bubbles;\n  },\n\n  get cancelable() {\n    return this._cancelable;\n  },\n\n  get target() {\n    return this._target;\n  },\n\n  get currentTarget() {\n    return this._currentTarget;\n  },\n\n  get eventPhase() {\n    return this._eventPhase;\n  },\n\n  get timeStamp() {\n    return this._timeStamp;\n  }\n\n};\n\nevents.HTMLEvent = function (eventType) {\n  events.Event.call(this, eventType);\n};\n\nevents.HTMLEvent.prototype.__proto__ = events.Event.prototype;\n\nevents.UIEvent = function (eventType) {\n  events.Event.call(this, eventType);\n  this.view = null;\n  this.detail = null;\n};\n\nevents.UIEvent.prototype = {\n  initUIEvent: function (type, bubbles, cancelable, view, detail) {\n    this.initEvent(type, bubbles, cancelable);\n    this.view = view;\n    this.detail = detail;\n  }\n};\nevents.UIEvent.prototype.__proto__ = events.Event.prototype;\n\nevents.MouseEvent = function (eventType) {\n  events.UIEvent.call(this, eventType);\n  this.screenX = null;\n  this.screenY = null;\n  this.clientX = null;\n  this.clientY = null;\n  this.ctrlKey = null;\n  this.shiftKey = null;\n  this.altKey = null;\n  this.metaKey = null;\n  this.button = null;\n  this.relatedTarget = null;\n};\n\nevents.MouseEvent.prototype = {\n  initMouseEvent: function (type, bubbles, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {\n    this.initUIEvent(type, bubbles, cancelable, view, detail);\n    this.screenX = screenX;\n    this.screenY = screenY;\n    this.clientX = clientX;\n    this.clientY = clientY;\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.button = button;\n    this.relatedTarget = relatedTarget;\n  }\n};\nevents.MouseEvent.prototype.__proto__ = events.UIEvent.prototype;\n\nevents.MutationEvent = function (eventType) {\n  events.Event.call(this, eventType);\n  this.relatedNode = null;\n  this.prevValue = null;\n  this.newValue = null;\n  this.attrName = null;\n  this.attrChange = null;\n};\n\nevents.MutationEvent.prototype = {\n  initMutationEvent: function (type, bubbles, cancelable, relatedNode, prevValue, newValue, attrName, attrChange) {\n    this.initEvent(type, bubbles, cancelable);\n    this.relatedNode = relatedNode;\n    this.prevValue = prevValue;\n    this.newValue = newValue;\n    this.attrName = attrName;\n    this.attrChange = attrChange;\n  },\n  MODIFICATION: 1,\n  ADDITION: 2,\n  REMOVAL: 3\n};\nevents.MutationEvent.prototype.__proto__ = events.Event.prototype;\n\nevents.EventTarget = function () {};\n\nevents.EventTarget.getListeners = function getListeners(target, type, capturing) {\n  var listeners = target._listeners && target._listeners[type] && target._listeners[type][capturing] || [];\n\n  if (!capturing) {\n    var traditionalHandler = target['on' + type];\n\n    if (traditionalHandler) {\n      var implementation = target._ownerDocument ? target._ownerDocument.implementation : target.document.implementation;\n\n      if (implementation.hasFeature('ProcessExternalResources', 'script')) {\n        listeners.push(traditionalHandler);\n      }\n    }\n  }\n\n  return listeners;\n};\n\nevents.EventTarget.dispatch = function dispatch(event, iterator, capturing) {\n  var listeners,\n      currentListener,\n      target = iterator();\n\n  while (target && !event._stopPropagation) {\n    listeners = events.EventTarget.getListeners(target, event._type, capturing);\n    currentListener = listeners.length;\n\n    while (currentListener--) {\n      event._currentTarget = target;\n\n      try {\n        listeners[currentListener].call(target, event);\n      } catch (e) {\n        target.raise('error', \"Dispatching event '\" + event._type + \"' failed\", {\n          error: e,\n          event: event\n        });\n      }\n    }\n\n    target = iterator();\n  }\n\n  return !event._stopPropagation;\n};\n\nevents.EventTarget.forwardIterator = function forwardIterator(list) {\n  var i = 0,\n      len = list.length;\n  return function iterator() {\n    return i < len ? list[i++] : null;\n  };\n};\n\nevents.EventTarget.backwardIterator = function backwardIterator(list) {\n  var i = list.length;\n  return function iterator() {\n    return i >= 0 ? list[--i] : null;\n  };\n};\n\nevents.EventTarget.singleIterator = function singleIterator(obj) {\n  var i = 1;\n  return function iterator() {\n    return i-- ? obj : null;\n  };\n};\n\nevents.EventTarget.prototype = {\n  addEventListener: function (type, listener, capturing) {\n    this._listeners = this._listeners || {};\n    var listeners = this._listeners[type] || {};\n    capturing = capturing === true;\n    var capturingListeners = listeners[capturing] || [];\n\n    for (var i = 0; i < capturingListeners.length; i++) {\n      if (capturingListeners[i] === listener) {\n        return;\n      }\n    }\n\n    capturingListeners.push(listener);\n    listeners[capturing] = capturingListeners;\n    this._listeners[type] = listeners;\n  },\n  removeEventListener: function (type, listener, capturing) {\n    var listeners = this._listeners && this._listeners[type];\n    if (!listeners) return;\n    var capturingListeners = listeners[capturing === true];\n    if (!capturingListeners) return;\n\n    for (var i = 0; i < capturingListeners.length; i++) {\n      if (capturingListeners[i] === listener) {\n        capturingListeners.splice(i, 1);\n        return;\n      }\n    }\n  },\n  dispatchEvent: function (event) {\n    if (event == null) {\n      throw new events.EventException(0, \"Null event\");\n    }\n\n    if (event._type == null || event._type == \"\") {\n      throw new events.EventException(0, \"Uninitialized event\");\n    }\n\n    var targetList = [];\n    event._target = this; //per the spec we gather the list of targets first to ensure\n    //against dom modifications during actual event dispatch\n\n    var target = this,\n        targetParent = target._parentNode;\n\n    while (targetParent) {\n      targetList.push(targetParent);\n      target = targetParent;\n      targetParent = target._parentNode;\n    }\n\n    targetParent = target._parentWindow;\n\n    if (targetParent) {\n      targetList.push(targetParent);\n    }\n\n    var iterator = events.EventTarget.backwardIterator(targetList);\n    event._eventPhase = event.CAPTURING_PHASE;\n    if (!events.EventTarget.dispatch(event, iterator, true)) return event._preventDefault;\n    iterator = events.EventTarget.singleIterator(event._target);\n    event._eventPhase = event.AT_TARGET;\n    if (!events.EventTarget.dispatch(event, iterator, false)) return event._preventDefault;\n\n    if (event._bubbles && !event._stopPropagation) {\n      var i = 0;\n      iterator = events.EventTarget.forwardIterator(targetList);\n      event._eventPhase = event.BUBBLING_PHASE;\n      events.EventTarget.dispatch(event, iterator, false);\n    }\n\n    return event._preventDefault;\n  }\n};\ncore.Node.prototype.__proto__ = events.EventTarget.prototype;\n\nfunction getDocument(el) {\n  return el.nodeType == core.Node.DOCUMENT_NODE ? el : el._ownerDocument;\n}\n\nfunction mutationEventsEnabled(el) {\n  return el.nodeType != core.Node.ATTRIBUTE_NODE && getDocument(el).implementation.hasFeature('MutationEvents');\n}\n\nutils.intercept(core.Node, 'insertBefore', function (_super, args, newChild, refChild) {\n  var ret = _super.apply(this, args);\n\n  if (mutationEventsEnabled(this)) {\n    var doc = getDocument(this),\n        ev = doc.createEvent(\"MutationEvents\");\n    ev.initMutationEvent(\"DOMNodeInserted\", true, false, this, null, null, null, null);\n    newChild.dispatchEvent(ev);\n\n    if (this.nodeType == core.Node.DOCUMENT_NODE || this._attachedToDocument) {\n      ev = doc.createEvent(\"MutationEvents\");\n      ev.initMutationEvent(\"DOMNodeInsertedIntoDocument\", false, false, null, null, null, null, null);\n      core.visitTree(newChild, function (el) {\n        if (el.nodeType == core.Node.ELEMENT_NODE) {\n          el.dispatchEvent(ev);\n          el._attachedToDocument = true;\n        }\n      });\n    }\n  }\n\n  return ret;\n});\nutils.intercept(core.Node, 'removeChild', function (_super, args, oldChild) {\n  if (mutationEventsEnabled(this)) {\n    var doc = getDocument(this),\n        ev = doc.createEvent(\"MutationEvents\");\n    ev.initMutationEvent(\"DOMNodeRemoved\", true, false, this, null, null, null, null);\n    oldChild.dispatchEvent(ev);\n    ev = doc.createEvent(\"MutationEvents\");\n    ev.initMutationEvent(\"DOMNodeRemovedFromDocument\", false, false, null, null, null, null, null);\n    core.visitTree(oldChild, function (el) {\n      if (el.nodeType == core.Node.ELEMENT_NODE) {\n        el.dispatchEvent(ev);\n        el._attachedToDocument = false;\n      }\n    });\n  }\n\n  return _super.apply(this, args);\n});\n\nfunction dispatchAttrEvent(change) {\n  return function (_super, args, node) {\n    var target = this._parentNode,\n        prev = _super.apply(this, args);\n\n    if (mutationEventsEnabled(target)) {\n      var doc = target._ownerDocument,\n          attrChange = events.MutationEvent.prototype[change],\n          attrName = prev && prev.name || node.name,\n          prevVal = prev && prev.value || null,\n          newVal = change == 'ADDITION' ? node.value : null,\n          ev;\n\n      if (!newVal || newVal != prevVal) {\n        ev = doc.createEvent(\"MutationEvents\");\n        ev.initMutationEvent(\"DOMAttrModified\", true, false, target, prevVal, newVal, attrName, attrChange);\n        target.dispatchEvent(ev);\n      }\n    }\n\n    return prev;\n  };\n}\n\nutils.intercept(core.AttrNodeMap, 'removeNamedItem', dispatchAttrEvent('REMOVAL'));\nutils.intercept(core.AttrNodeMap, 'setNamedItem', dispatchAttrEvent('ADDITION'));\n\ncore.CharacterData.prototype.__defineGetter__(\"_nodeValue\", function () {\n  return this.__nodeValue;\n});\n\ncore.CharacterData.prototype.__defineSetter__(\"_nodeValue\", function (value) {\n  var oldValue = this.__nodeValue;\n  this.__nodeValue = value;\n\n  if (this._ownerDocument && this._parentNode && mutationEventsEnabled(this)) {\n    var ev = this._ownerDocument.createEvent(\"MutationEvents\");\n\n    ev.initMutationEvent(\"DOMCharacterDataModified\", true, false, this, oldValue, value, null, null);\n    this.dispatchEvent(ev);\n  }\n});\n\ncore.Document.prototype.createEvent = function (eventType) {\n  switch (eventType) {\n    case \"MutationEvents\":\n      return new events.MutationEvent(eventType);\n\n    case \"UIEvents\":\n      return new events.UIEvent(eventType);\n\n    case \"MouseEvents\":\n      return new events.MouseEvent(eventType);\n\n    case \"HTMLEvents\":\n      return new events.HTMLEvent(eventType);\n  }\n\n  return new events.Event(eventType);\n};\n\nexports.dom = {\n  level2: {\n    core: core,\n    events: events\n  }\n};","map":null,"metadata":{},"sourceType":"script"}