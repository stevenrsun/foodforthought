{"ast":null,"code":"var core = require(\"./core\").dom.level2.core,\n    html = require(\"./html\").dom.level2.html,\n    utils = require(\"../utils\"),\n    cssom = require(\"cssom\"),\n    assert = require('assert'); // What works now:\n// - Accessing the rules defined in individual stylesheets\n// - Modifications to style content attribute are reflected in style property\n// - Modifications to style property are reflected in style content attribute\n// TODO\n// - Modifications to style element's textContent are reflected in sheet property.\n// - Modifications to style element's sheet property are reflected in textContent.\n// - Modifications to link.href property are reflected in sheet property.\n// - Less-used features of link: disabled\n// - Less-used features of style: disabled, scoped, title\n// - CSSOM-View\n//   - getComputedStyle(): requires default stylesheet, cascading, inheritance,\n//     filtering by @media (screen? print?), layout for widths/heights\n// - Load events are not in the specs, but apparently some browsers\n//   implement something. Should onload only fire after all @imports have been\n//   loaded, or only the primary sheet?\n\n\ncore.StyleSheet = cssom.StyleSheet;\ncore.MediaList = cssom.MediaList;\ncore.CSSStyleSheet = cssom.CSSStyleSheet;\ncore.CSSRule = cssom.CSSRule;\ncore.CSSStyleRule = cssom.CSSStyleRule;\ncore.CSSMediaRule = cssom.CSSMediaRule;\ncore.CSSImportRule = cssom.CSSImportRule;\ncore.CSSStyleDeclaration = cssom.CSSStyleDeclaration; // Relavant specs\n// http://www.w3.org/TR/DOM-Level-2-Style (2000)\n// http://www.w3.org/TR/cssom-view/ (2008)\n// http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course\n// http://dev.w3.org/csswg/css-style-attr/  not sure what's new here\n// Objects that aren't in cssom library but should be:\n//   CSSRuleList  (cssom just uses array)\n//   CSSFontFaceRule\n//   CSSPageRule\n// These rules don't really make sense to implement, so CSSOM draft makes them\n// obsolete.\n//   CSSCharsetRule\n//   CSSUnknownRule\n// These objects are considered obsolete by CSSOM draft, although modern\n// browsers implement them.\n//   CSSValue\n//   CSSPrimitiveValue\n//   CSSValueList\n//   RGBColor\n//   Rect\n//   Counter\n// StyleSheetList has the same interface as NodeList, so we'll use the same\n// object.\n\ncore.StyleSheetList = core.NodeList;\n\ncore.Document.prototype.__defineGetter__('styleSheets', function () {\n  if (!this._styleSheets) {\n    this._styleSheets = new core.StyleSheetList();\n  } // TODO: each style and link element should register its sheet on creation\n  // nad remove it on removal.\n\n\n  return this._styleSheets;\n});\n/**\n * @this {html.HTMLLinkElement|html.HTMLStyleElement}\n * @param {string} url\n * @param {cssom.CSSStyleSheet} sheet\n * @see http://dev.w3.org/csswg/cssom/#requirements-on-user-agents-implementing0\n */\n\n\nfunction fetchStylesheet(url, sheet) {\n  html.resourceLoader.load(this, url, function (data, filename) {\n    // TODO: abort if the content-type is not text/css, and the document is\n    // in strict mode\n    evaluateStylesheet.call(this, data, sheet, url);\n  });\n}\n/**\n * @this {html.HTMLLinkElement|html.HTMLStyleElement}\n * @param {string} data\n * @param {cssom.CSSStyleSheet} sheet\n * @param {string} baseUrl\n */\n\n\nfunction evaluateStylesheet(data, sheet, baseUrl) {\n  // this is the element\n  var newStyleSheet = cssom.parse(data);\n  var spliceArgs = newStyleSheet.cssRules;\n  spliceArgs.unshift(0, sheet.cssRules.length);\n  Array.prototype.splice.apply(sheet.cssRules, spliceArgs);\n  scanForImportRules.call(this, sheet.cssRules, baseUrl);\n}\n/**\n * @this {html.HTMLLinkElement|html.HTMLStyleElement}\n * @param {cssom.CSSStyleSheet} sheet\n * @param {string} baseUrl\n */\n\n\nfunction scanForImportRules(cssRules, baseUrl) {\n  if (!cssRules) return;\n\n  for (var i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules.call(this, cssRules[i].cssRules, baseUrl);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      fetchStylesheet.call(this, cssRules[i].href, this.sheet);\n    }\n  }\n}\n/**\n * @param {string} data\n * @param {cssom.CSSStyleDeclaration} style\n */\n\n\nfunction evaluateStyleAttribute(data) {\n  // this is the element.\n  // currently, cssom's parse doesn't really work if you pass in\n  // {state: 'name'}, so instead we just build a dummy sheet.\n  var styleSheet = cssom.parse('dummy{' + data + '}');\n  var style = this.style;\n\n  while (style.length) {\n    style.removeProperty(style[0]);\n  }\n\n  if (styleSheet.cssRules.length > 0 && styleSheet.cssRules[0].style) {\n    var newStyle = styleSheet.cssRules[0].style;\n\n    for (var i = 0; i < newStyle.length; ++i) {\n      var prop = newStyle[i];\n      style.setProperty(prop, newStyle.getPropertyValue(prop), newStyle.getPropertyPriority(prop));\n    }\n  }\n}\n/**\n * Subclass of core.Attr that reflects the current cssText.\n */\n\n\nfunction StyleAttr(node, value) {\n  this._node = node;\n  core.Attr.call(this, node.ownerDocument, 'style');\n  this.nodeValue = value;\n}\n\nStyleAttr.prototype = {\n  get nodeValue() {\n    return this._node.style.cssText;\n  },\n\n  set nodeValue(value) {\n    evaluateStyleAttribute.call(this._node, value);\n  }\n\n};\nStyleAttr.prototype.__proto__ = core.Attr.prototype;\n/**\n * Overwrite core.AttrNodeMap#setNamedItem to create a StyleAttr instance\n * instead of a core.Attr if the name equals 'style'.\n */\n\nutils.intercept(core.AttrNodeMap, 'setNamedItem', function (_super, args, attr) {\n  if (attr.name == 'style') {\n    attr = new StyleAttr(this._parentNode, attr.nodeValue);\n  }\n\n  return _super.call(this, attr);\n});\n/**\n * Lazily create a CSSStyleDeclaration.\n */\n\nhtml.HTMLElement.prototype.__defineGetter__('style', function () {\n  var style = this._cssStyleDeclaration;\n\n  if (!style) {\n    style = this._cssStyleDeclaration = new cssom.CSSStyleDeclaration();\n\n    if (!this.getAttributeNode('style')) {\n      this.setAttribute('style', '');\n    }\n  }\n\n  return style;\n});\n\nassert.equal(undefined, html.HTMLLinkElement._init);\n\nhtml.HTMLLinkElement._init = function () {\n  this.addEventListener('DOMNodeInsertedIntoDocument', function () {\n    if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(this.rel)) {\n      // rel is a space-separated list of tokens, and the original rel types\n      // are case-insensitive.\n      return;\n    }\n\n    if (this.href) {\n      fetchStylesheet.call(this, this.href, this.sheet);\n    }\n  });\n  this.addEventListener('DOMNodeRemovedFromDocument', function () {});\n};\n/**\n * @this {HTMLStyleElement|HTMLLinkElement}\n */\n\n\nvar getOrCreateSheet = function () {\n  if (!this._cssStyleSheet) {\n    this._cssStyleSheet = new cssom.CSSStyleSheet();\n  }\n\n  return this._cssStyleSheet;\n};\n\nhtml.HTMLLinkElement.prototype.__defineGetter__('sheet', getOrCreateSheet);\n\nassert.equal(undefined, html.HTMLStyleElement._init);\n\nhtml.HTMLStyleElement._init = function () {\n  //console.log('init style')\n  this.addEventListener('DOMNodeInsertedIntoDocument', function () {\n    //console.log('style inserted')\n    //console.log('sheet: ', this.sheet);\n    if (this.type && this.type !== 'text/css') {\n      //console.log('bad type: ' + this.type)\n      return;\n    }\n\n    evaluateStylesheet.call(this, this.textContent, this.sheet, this._ownerDocument.URL);\n  });\n};\n\nhtml.HTMLStyleElement.prototype.__defineGetter__('sheet', getOrCreateSheet);\n\nexports.dom = {\n  level2: {\n    html: html,\n    core: core\n  }\n};","map":null,"metadata":{},"sourceType":"script"}